#!/usr/bin/env perl
#  svnCheckoutStateBackup
#  Copyright (C) 2009  Hartmut Vogler (it@guru.de)
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#  ---------------------------------------------------------------------
#
#  This script scans an svn checked out tree, to create a recovery
#  script witch can restore the current checkout state.
#
#  ---------------------------------------------------------------------
use strict;
use File::Find;
use File::Basename;
use FindBin;
use XML::Parser;
use Data::Dumper;
use Date::Calc(qw(Day_of_Week_to_Text Week_of_Year Today_and_Now
                  Day_of_Week));


my $svndir=$ARGV[0];
my $recovscript=$ARGV[1];
my $htmlstatus=$ARGV[2];

if (!defined($recovscript)){
   $recovscript="svn.recovery.%Y%M%D-%hh.sh";
}

if ($svndir eq "" || $recovscript eq ""){
   help();
   exit(1);
}

printf("Try to create a recovery script\n".
       "for '%s' in the\n".
       "script '%s'.\n",$svndir,$recovscript);
my %format;

($format{Y},$format{M},$format{D},
 $format{h},$format{m},$format{s})=Today_and_Now();
($format{w})=Week_of_Year($format{Y},$format{M},$format{D});
($format{d})=Day_of_Week_to_Text(Day_of_Week($format{Y},$format{M},$format{D}));

foreach my $v (qw(h m s M D w)){
   $format{$v}=sprintf("%02d",$format{$v});
}
foreach my $key (keys(%format)){
   $recovscript=~s/\%$key/$format{$key}/;
}
printf("Output: %s\n",$recovscript);
printf("Pass1: start calculating major revision\n");
my %rev;

if (open(F,"svn info -R --xml $svndir|")){
   my $XMLp=new XML::Parser(Handlers=>{
                               Start => \&handle_pass1,
                            });
   $XMLp->parse(*F); 
   close(F);
}
else{
   printf STDERR ("ERROR: fail to read svn info\n");
   exit(1);
}
my $maxrevcount=0;
my $maxrev=0;
foreach my $rev (keys(%rev)){
   if ($rev{$rev}>$maxrevcount){
      $maxrev=$rev;
      $maxrevcount=$rev{$rev};
   }
}
my $revcount=keys(%rev);
printf("       found %d revsions, most revision=%s\n",$revcount,$maxrev);

printf("Pass2: writing recovery script\n");
if (open(OUT,">".$recovscript)){
   printf OUT ("#!/bin/bash\n");
   printf OUT ("svn update -r $maxrev '$svndir'\n");
   if (open(F,"svn info -R --xml $svndir|")){
      my $XMLp=new XML::Parser(Handlers=>{
                                  Start => \&handle_pass2,
                               });
      $XMLp->parse(*F); 
      close(F);
   }

   close(OUT);
}
else{
   printf STDERR ("ERROR: fail to open output file '$recovscript'\n");
   exit(1);
}

if ($htmlstatus ne ""){
   my @pending;
   my @revinfo;
   my $targetrev;
   if (open(SVN,"svn status -u $svndir|")){
      while(my $l=<SVN>){
         $l=~s/\s*$//;
         if (my ($tr)=$l=~m/Status against revision:\s*(\d+).*/i){
            $targetrev=$tr;
         }
         else{
            if (!($l=~m/^\s*\?/)){
               $l=~s/^.[\s\*\d]*//g;
               push(@pending,$l); 
            }
         }
      }
      close(SVN); 
   }
   printf("Pass3: writing html status page\n");
   if (open(F,">$htmlstatus")){
      printf("       target revision %s\n",$targetrev);
      for(my $r=$maxrev+1;$r<=$targetrev;$r++){
         printf("       - loading info for %s\n",$r);
         if (open(SVN,"svn log -r $r $svndir|")){
            my $revinfo=join("",<SVN>);
            if ($revinfo=~m/^\s*$/){
               printf STDERR ("unexpected result from svn log\n");
               exit(1);
            }
            $revinfo=~s/\n/<br>/g;
            push(@revinfo,"<tr><td><font face=\"Courier\">".$revinfo.
                          "</font></td></tr>");
            close(SVN);
         }
      }
      print F ("<html>");
      print F ("<head>");
      print F ("</head>");
      print F ("<body>");
      my $date=`date`;
      print F ("Status: $date<br>");
      printf F ("Current full installed revision: <b>%s</b><br>",$maxrev);
      if (keys(%rev)>1){
         print F ("<ul>");
         foreach my $r (keys(%rev)){
            next if ($r eq $maxrev);
            printf F ("<li>Partial revision %s with %d files<br>",$r,$rev{$r});
         }
         print F ("</ul>");
      }
      if ($#revinfo!=-1){
         printf F ("Current pending update informations:<br>".
                   "<table width=1%>%s</table>",
                   join("\n",@revinfo));
      }
      if ($#pending!=-1){
         printf F ("Current pending file updates:<br><xmp>%s</xmp>",
                   join("\n",@pending));
      }
      


      print F ("</body>");
      print F ("</html>");
   }
}



sub help
{
   my $bin=$FindBin::Bin;
   printf STDERR ("Usage: %s <svn dir> <target script>\n",$bin);
}

sub handle_pass1
{
   my ($expat,$e,%attr)=@_;
   if ($e eq "entry"){
      $rev{$attr{'revision'}}++;
   }
}

sub handle_pass2
{
   my ($expat,$e,%attr)=@_;
   if ($e eq "entry"){
      if ($attr{'revision'}==0){
         printf STDERR ("WARN  : '%s' changed without commit!\n",
                        $attr{'path'});
      }
      else{
         if ($attr{'revision'} ne $maxrev ){
            printf OUT ("svn update -r $attr{'revision'} '$attr{'path'}'\n");
         }
      }
   }
}
