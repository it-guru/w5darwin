#!/usr/bin/env perl
package MyWin;
#  W5Base Framework
#  Copyright (C) 2008  Holm Basedow (info@blauwarme.de)
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#  $Revision$  Subversion Revision Number
use strict;
use vars qw(@ISA);
use Data::Dumper;
@ISA=qw(Win32::GUI::Window);

sub new
{
   my $type=shift;
   my %param=@_;
   my $rdir=$param{-rdir};
   my $ldir=$param{-ldir};
   my $o=$param{o};
   my $force=$param{-force};
   my $nowarn=$param{-nowarn};
   my $apidebug=$param{-apidebug};
   my $mode=$param{-mode};
   my $params=$param{-params};
   my $warncount=$param{-warnings};
   my $files=$param{-files};
   my $version=$param{-version};
   my $fullstoredfilename=$param{-fullstoredfilename};
   my $icon = eval("newIcon Win32::GUI::BitmapInline(main::WindowIcon());");
   $param{-icon}=$icon;
   $param{-left}=100;
   $param{-height}=500;
   $param{-width}=700;
   $param{-dialogui}=1;
   $param{-title}="test" if (!$param{-title});
   $param{-name}="Main";
   $param{-onResize}=\&doResize;
   $param{-onTerminate}=\&doTerminate;
   $param{-onMinimize}=\&doMinimize;
   $param{-minsize}=[700,400];
   eval("\$param{-menu}=Win32::GUI::MakeMenu(
                                     '&File' => 'File',
                                     ' > &End'  => { -name=>'Exit',-onClick=>\\&doTerminate},
                                     '&?' => 'Info',
                                     ' > &Help'   => { -name=>'Help',-onClick=>\\&Help},
                                     ' > &Info'   => { -name=>'Info',-onClick=>\\&Info},
   );");
   my $self=$type->SUPER::new(%param);
   $self->SetIcon($icon);
   #$self->MessageBox('error','header');
   $self=bless($self,$type);
   $self->{mode}=$mode;
   $self->{rdir}=$rdir;
   $self->{ldir}=$ldir;
   $self->{force}=$force;
   $self->{nowarn}=$nowarn;
   $self->{apidebug}=$apidebug;
   $self->{fullstoredfilename}=$fullstoredfilename;
   $self->{PARAM}=$params;
   $self->{VERSION}=$version;
   $self->{o}=$o;
   $self->{ICON}=$icon;
   $self->{warncount}=$warncount;
   $self->{files}=$files;
   $self->AddNotifyIcon(-name => "systray",
                        -icon => $self->{ICON},
                        -tip  => "W5Base Synchronizer",
   );
   $self->Center();
   $self->{GRID}=eval("apply Win32::GUI::GridLayout(\$self,
                       [qw(10 10 * 30 10 15 10 150 80 100 10 10)],
                       [qw(10 25 10 20 10 20 20 20 10 10 20 10 * 10 40 10 20 10)],0,0);");
   $self->{FONT}=eval("new Win32::GUI::Font(-bold   => 1,
                                            -size   => 12,
   )");
   $self->{FONT2}=eval("new Win32::GUI::Font(-bold   => 0,
                                             -size   => 12,
   )");
   $self->{BITMAP}=eval("new Win32::GUI::BitmapInline(main::WindowImg());");
   # header
   $self->AddLabel(
          -name        => "headname",
          -text        => "W5Base SYNCHRONIZER",
          -font        => $self->{FONT},
          -foreground  => 0x000000,
   );
   $self->{GRID}->add($self->headname,[3..12],2,"left justify");
   $self->AddLabel(
          -name        => "headname",
          -text        => $self->{VERSION},
          -font        => $self->{FONT2},
          -foreground  => 0x000000,
   );
   $self->{GRID}->add($self->headname,[1..10],2,"right justify");
   $self->AddLabel(
          -name         => "pic",
          -bitmap       => $self->{BITMAP},
          -size         => [200,200],
   );
   $self->{GRID}->add($self->pic,10,6,"right center");
   $self->AddGroupbox( 
           -name => "header", 
           -size => [100,100],
   );
   $self->{GRID}->add($self->header, [2..11], [1..2], "justify justify");
   # input data 
   $self->AddLabel(
          -name   => "remotepathlabel",
          -text   => "Remote Path",
   );
   $self->{GRID}->add($self->remotepathlabel,[3..4],5,"justify buttom");
   $self->AddTextfield(
           -name      => "remotepath",
           -text      => $rdir,
           -width     => 130,
           -height    => 20,
           -tabstop     => 1,
   );
   $self->{GRID}->add($self->remotepath, [3..4],6,"justify top");
   $self->AddLabel(
          -name   => "localpathlabel",
          -text   => "Local Path",
   );
   $self->{GRID}->add($self->localpathlabel,[3..4],7,"justify buttom");
   $self->AddTextfield(
           -name      => "localpath",
           -text      => $ldir,
           -width     => 130,
           -height    => 20,
           -tabstop   => 1,
   );
   $self->{GRID}->add($self->localpath, 3,8,"justify top");
   $self->AddButton(
           -name     => "loadpath",
           -text     => "...",
           -disabled => 0,
           -onClick  => \&OpenFile, 
   );
   $self->{GRID}->add($self->loadpath,4,8,"justify top");
   $self->AddCheckbox(
           -name     => "writedata",
           -text     => "write Data",
           -checked  => 1,
           -tabstop  => 1,
   );
   $self->{GRID}->add($self->writedata,3,[10..11],"left top");
   $self->AddCheckbox(
           -name     => "warnings",
           -text     => "Warnings on",
           -checked  => 1,
           -tabstop  => 1,
   );
   $self->{GRID}->add($self->warnings,3,[10..11],"right top");
   $self->AddGroupbox( 
           -name => "inputdata", 
           -text => "input",
           -size => [100,133],
   );
   $self->{GRID}->add($self->inputdata, [2..5], [4..10], "justify top");
   # login data
   $self->AddLabel(
          -name   => "webuserl",
          -text   => "Webuser",
   );
   $self->{GRID}->add($self->webuserl,8,5,"justify buttom");
   $self->AddTextfield(
          -name      => "webuser",
          -text      => ${$self->{PARAM}->{'webuser=s'}},
          -width     => 130,
          -height    => 20,
          -tabstop=> 1,
   );
   $self->{GRID}->add($self->webuser, 8, 6, "justify top");
   $self->AddLabel(
          -name   => "webpassl",
          -text   => "Webpassword",
   );
   $self->{GRID}->add($self->webpassl,9,5,"justify buttom");
   $self->AddTextfield(
          -name      => "webpass",
          -text      => ${$self->{PARAM}->{'webpass=s'}},
          -width     => 130,
          -height    => 20,
          -password  => 1,
          -tabstop=> 1,
   );
   $self->{GRID}->add($self->webpass, 9, 6, "justify top");
   $self->AddLabel(
          -name   => "baseurl",
          -text   => "BaseURL",
   );
   $self->{GRID}->add($self->baseurl,8,7,"justify buttom");
   $self->AddTextfield(
          -name      => "base",
          -text      => ${$self->{PARAM}->{'base=s'}},
          -width     => 130,
          -height    => 20,
          -tabstop=> 1,
   );
   $self->{GRID}->add($self->base, [8..10], 8, "justify top");
   $self->AddGroupbox( 
          -name => "connectdata", 
          -text => "connect data",
          -size => [100,100],
   );
   $self->{GRID}->add($self->connectdata, [7..11], [4..8], "justify top");
   # admin options
   $self->AddRadioButton(
           -name     => "download",
           -text     => "Download",
           -checked  => 1,
           -tabstop  => 1,
           -disabled => 1,
   );
   $self->{GRID}->add($self->download,8,11,"right top");
   $self->AddRadioButton(
           -name     => "upload",
           -text     => "Upload",
           -checked  => 0,
           -tabstop  => 1,
           -disabled => 1,
   );
   $self->{GRID}->add($self->upload,9,11,"left top");
   $self->AddGroupbox( 
          -name => "admin", 
          -text => "admin",
          -size => [100,33],
   );
   $self->{GRID}->add($self->admin, [7..11], [10..12], "justify top");
   # output textfield
   $self->AddTextfield(
           -name        => "output",
           -text        => "",
           -multiline   => 1,
           -readonly    => 1,
           -autohscroll => 1,
           -hscroll     => 1,
           -autovscroll => 1,
           -vscroll     => 1,
           -foreground  => 0x000000,
           -background  => 0xE6E6E6,
   );
   $self->{GRID}->add($self->output, [2..11], 13, "justify justify");
   # start button
   $self->AddButton(
           -name     => "run",
           -text     => "Sync",
           -disabled  => 0,
           -onClick  => \&doStart, 
   );
   $self->{GRID}->add($self->run,[2..11],15,"justify justify");
   $self->AddProgressBar(
           -name     => "pgbar",
           -smooth   => 1,
   );
   $self->{GRID}->add($self->pgbar,[2..11],17,"justify justify");
   $self->{GRID}->recalc();
   $self->warnings->SetCheck(0) if ($self->{nowarn});
   $self->writedata->SetCheck(1) if ($self->{force});
   if ($self->{mode} eq "upload"){
      $self->upload->SetCheck(1);
      $self->download->SetCheck(0);
   }
   $self->checkMode();
   return($self); 
}

sub OpenFile
{
   my $self=shift;
   my $mainwin=$self->GetParent();
   my $folder;
   eval('$folder = Win32::GUI::BrowseForFolder();');
   if ($folder){
      $mainwin->{ldir}=$folder;
      $mainwin->localpath->Change(-text=>"$folder");
   }
}

sub doStart
{
   my $self=shift;
   my @oplist; 
   my $mainwin=$self;
   if (!($mainwin=~m/^MyWin*/)){
      $mainwin=$self->GetParent();
   }
   #if ($mainwin->run->Text() eq "Abort"){
   #  exit;
   #}
   $mainwin->output->LimitText(1000000);
   $mainwin->output->SetFocus();
   my $directorycount=0;
   my ($exitcode, $msgs);
   my @result=$mainwin->checkMode();
   if ($result[0] != 0){
      return(1,$result[1]);
   }
   $mainwin->output->Append("login ... ");
   # define progressbar values
   $mainwin->pgbar->StepIt();
   $mainwin->pgbar->SetRange(0,1500);
   $mainwin->pgbar->SetStep(1);
   $mainwin->pgbar->SetPos(50);
   # connect API
   my $Config=main::createConfig(${$mainwin->{PARAM}->{'base=s'}},
                                 ${$mainwin->{PARAM}->{'webuser=s'}},
                                 ${$mainwin->{PARAM}->{'webpass=s'}},
                                 0,$mainwin->{apidebug},\$exitcode,\$msgs);
   if (!$Config){
      eval("Win32::MsgBox(\"login error: \$msgs \$exitcode\",
            Win32::MB_ICONQUESTION|0, 'Error!')");   
      $mainwin->run->Enable(1);
      return(1,$msgs);
   }else{
      my %save;
     # $mainwin->run->Change(-text => "Abort");
      $mainwin->run->Enable(0);
      foreach my $save (qw(ldir=s webpass=s rdir=s base=s webuser=s)){
         $save{$save}=$mainwin->{PARAM}->{$save};
      }
      main::XSaveStoreFile($mainwin->{fullstoredfilename},\%save);
   }
   $mainwin->pgbar->SetPos(100);
   $mainwin->output->Append("done\r\nget objects ... ");
   # get module object
   @result=main::moduleObj($Config);
   if ($result[0] != 0){
      eval("Win32::MsgBox(\"\$result[1]\",Win32::MB_ICONQUESTION|0, 'Error!')");   
      $mainwin->run->Enable(1);
      return(1,$result[1]);
   }

   # looking for remote directory
   $mainwin->{rdir}=~s/^[\/\\]//g;
   $mainwin->{o}{'filemgmt'}->SetFilter({fullname=>$mainwin->{rdir},
                                        parentobj=>undef}); 
   my @rdirid=$mainwin->{o}{'filemgmt'}->getHashList(qw(fid fullname name));
   my @res=$mainwin->{o}{'filemgmt'}->LastMsg();
   return(1,$res[0]) if (defined($res[0]));

   $mainwin->pgbar->SetPos(150);
   if ($#rdirid == 0){
      $mainwin->output->Append("done\r\nmode -> ".$mainwin->{mode}.
                               "\r\ncomputing operations...\r\n");
      if (!(-w $mainwin->{ldir}."/".$mainwin->{rdir}) && -e $mainwin->{ldir}.
               "/".$mainwin->{rdir}){
         $mainwin->{rdir}=~s/\//\\/g; 
         $mainwin->MessageBox("no access on".
                    $mainwin->{ldir}."\\".$mainwin->{rdir},'ERROR',0x0020);
         return(0);
      }
      @result=main::directoryLoop($rdirid[0]->{fid},$rdirid[0]->{fullname},
                                  $rdirid[0]->{name},undef,$Config,$directorycount,
                                  $mainwin->{mode},$mainwin->{force},
                                  \&StepIt,$mainwin);
      if ($result[0] != 0){  
         $mainwin->run->Enable(1);
         $result[1]=~s/\//\\/g; 
         $mainwin->MessageBox($result[1],'ERROR',0x0020);
         return(0);
      }
   }else{
       $mainwin->MessageBox("remote directory '".$mainwin->{rdir}.
                  "' not exists or not unique!",'ERROR',0x0020);
       $mainwin->checkMode();
       return(0);
   }
   my @vol=main::volume();
   $mainwin->output->Append("\r\ntransfervolume\t$vol[0] $vol[1]\r"); 
   $mainwin->output->Append("\r\nfiles\t\t".${$mainwin->{files}}."\r"); 
   $mainwin->output->Append("\r\nwarnings\t\t".${$mainwin->{warncount}}."\r\n"); 
   # reset counts
   ${$mainwin->{files}}=0;
   ${$mainwin->{warncount}}=0;
   if (main::action() == 0){
      $mainwin->output->Append("\r\nnothing to do!\r\n");
   }
   # set window formality 
   $mainwin->output->Append("\r\nready!");
   $mainwin->run->Enable(1);
   $mainwin->pgbar->SetPos(1500);
}

sub StepIt
{
   my $self=shift;
   my $text=shift;
   my $wrap=shift;
   $self->pgbar->StepIt();;
   if ($self->warnings->GetCheck() == 0 and substr($text,0,4) eq "WARN"){
      return(0); 
   } 
   $text=main::encode("iso-8859-1",$text);
   if ($text && $wrap == 1){
      $self->output->Append($text);
   }elsif($text){
      $self->output->Append($text."\r\n");
   }
   $self->DoEvents();
}

sub checkMode
{
   my $self=shift;
   # clear output textfield
   $self->output->Change(-text => "");
   $self->output->DoEvents();
   # reset progressbar
   $self->pgbar->SetPos(0);
   # load path
   $self->{rdir}=$self->remotepath->GetLine(0);
   $self->{ldir}=$self->localpath->GetLine(0);
   my $folder=$self->{ldir};
   # check filemode
   if (-d $folder){
      $self->run->Enable(1);
      $self->{FH}=\*FILE;
      $self->localpath->Change(-text=>"$folder");
   }
   # save datas
   ${$self->{PARAM}->{'base=s'}}=$self->base->GetLine(0);
   ${$self->{PARAM}->{'webuser=s'}}=$self->webuser->GetLine(0);
   ${$self->{PARAM}->{'webpass=s'}}=$self->webpass->GetLine(0);
   ${$self->{PARAM}->{'rdir=s'}}=$self->{rdir};
   ${$self->{PARAM}->{'ldir=s'}}=$self->{ldir};
   # define modes
   if ($self->warnings->GetCheck() == 1){
      $self->{nowarn}=1;
   }else{
      $self->{nowarn}=undef;
   }
   if ($self->writedata->GetCheck() == 1){
      $self->{force}=1;
   }else{
      $self->{force}=undef;
   }
   if ($self->upload->GetCheck() == 1){
      $self->{mode}="upload";
   }else{
      $self->{mode}="download";
   }
   # set admin options
   if (${$self->{PARAM}->{'admin'}} == 1){
      $self->download->Change(-disabled=>0);      
      $self->upload->Change(-disabled=>0);      
   }
   return(0);
}

sub Help
{
   my $self=shift; 
   my $text=(<<EOF);
input
--------------------------
Remote Path\t->\tis the WebFS Path on the Server f.e. 'ITSCM'
Local Path\t->\tis the Local Path on your pc f.e. c:\\temp 
write Data\t->\tisn't this options activated, operations only
\t\t\twill be simulated, no files will be uploaded or
\t\t\tdownloaded 
Warnings On\t->\tshow warning messages 

connect data
--------------------------
Webuser\t\t->\tyour web account, same like on the webinterface,
\t\t\tf.e. sued/basedow.holm or wiw/hbasedow
Webpassword\t->\tyour web password, same like on the web interface
BaseURL\t\t->\turl or your filemgmt
\t\t\tf.e. https://darwin.telekom.de/darwin/auth

admin 
--------------------------
Download\t\t->\tsynchronize your local filesystem
\t\t\tfrom the remote filesystem
Upload\t\t->\tsynchronize your remote filesystem
\t\t\tfrom the local filesystem

options
--------------------------
 --verbose\tdisplay more details of operation process
 --quiet\t\tonly errors would be displayed
 --base\t\tbase url of filemgmt 
 --webuser\tusername
 --webpass\tpassword
 --store\t\tstores the parameters (not help,verbose and store)
 --help\t\tshow this help
 --mode\t\tdownload or upload [default:download]
 --rdir\t\tremote directory
 --ldir\t\tlocal directory
 --force\t\twrite data  
 --nogui\t\tfor commandline usage in win32 systems only, default is gui on
 --nowarn\t\tprevent warnings
 --admin\t\tenable admin options
 --autostart\tsync automatically, in win32 mode only


EOF
   $self->MessageBox("$text",'Infomation',0x0020);
}

sub Info
{
   my $self=shift; 
   my $version=$self->{VERSION};
   my $text=(<<EOF);
$version

W5Base Syncronizer compare two filesystems and 
syncronize files and folder. It's matter who is the
master it will be upload or download objects. 

W5Base Framework
Copyright (C) 2008  Holm Basedow (info\@blauwaerme.de)

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
EOF

   $self->MessageBox("$text",'Infomation',0x0020);
}

sub doTerminate
{
   return(-1);
}

sub doResize
{
   my $self=shift;
   $self->{GRID}->recalc();
}

sub doMinimize {
    return(1);
}

################################################################################
package main;
use strict;                   
use lib qw(c:\\Programme\\opt\\w5base\\lib /opt/w5base/lib);
use W5Base::API;
use Data::Dumper;
use File::Path;
use POSIX;
use MIME::Entity;
use Config;
use Encode;
use Data::HexDump;
use vars qw($GUI $Window);


my $DefaultBase="https://w5base.net/w5base/auth/";
my ($help,$verbose,$loginuser,$loginpass,$quiet,$base,$lang,$admin);
my ($mode,$force,$rdir,$ldir,$nogui,$nowarn,%o,$Revision,$empty,$autostart);
my $os=$Config{'osname'};
my $action=0;
my $volume=0;
my $count=0;
my $warnings=0;
my $files=0;
my $version="Version 0.1 build$Revision$empty ";
my %P=("help"=>\$help,"base=s"=>\$base,"lang=s"=>\$lang,
       "webuser=s"=>\$loginuser,"webpass=s"=> \$loginpass,
       "verbose+"=>\$verbose,"nowarn"=>\$nowarn,"admin"=>\$admin,
       "force"=>\$force,"rdir=s"=>\$rdir,"ldir=s"=>\$ldir,
       "mode=s"=>\$mode,"nogui"=>\$nogui,"autostart"=>\$autostart);

# set options
$|=1;
my $storefile=".websync";
XGetOptions(\%P,\&Help,undef,undef,"$storefile",noautologin=>1);
my $apidebug=$verbose>=3 ? 1 : 0;

# set defaults
$mode="download" if (!defined($mode));

sub moduleObj
{
   my $Config=shift;
   # load ModuleObject
   my %loadobj=('filemgmt'=>'base::filemgmt',
                );
   foreach my $localid (keys(%loadobj)){
      my $objectname=$loadobj{$localid};
      my $obj=getModuleObject($Config,$objectname);
      if (!defined($obj)){
         return(1,"$obj not defined");
      }
      $o{$localid}=$obj;
   }
   return(0);
}

if ($os eq "MSWin32" && !$nogui){
   $|=1;
   my $fullstoredfilename=$ENV{HOMEDRIVE}.$ENV{HOMEPATH}."\\$storefile";
   XLoadStoreFile($fullstoredfilename,\%P);
   eval('
         use Win32::GUI;
         use Win32::GUI::GridLayout;
         use Win32::GUI::BitmapInline;
         use Win32::GUI::DIBitmap;
         $GUI=new MyWin(-title=>"W5Base Importer", 
                        o=>\%o,
                        -mode=>$mode,
                        -files=>\$files,
                        -warnings=>\$warnings,
                        -version=>$version,
                        -rdir=>$rdir,
                        -ldir=>$ldir,
                        -nowarn=>$nowarn,
                        -apidebug=>$apidebug,
                        -fullstoredfilename=>$fullstoredfilename,
                        -params=>\%P,
                        -force=>$force);
         $GUI->Show();
         if ($autostart){
            $GUI->doStart();
            sleep(2);
            return(-1);
         }
         Win32::GUI::Dialog();');
   msg(ERROR,"--gui only on windows systems \n $@") if ($@);
}else{
   my $tzorg=$ENV{TZ};
   $ENV{TZ}="UTC";
   # create connection config
   my $Config=createConfig($base,$loginuser,$loginpass,$lang,$apidebug);
   my $directorycount=0;
   my @result=moduleObj($Config);
   if ($result[0] != 0){  
      msg(ERROR,$result[1]);  
      exit(1);
   }
   $rdir=~s/^[\/\\]//g;
   $o{'filemgmt'}->SetFilter({fullname=>"$rdir",parentobj=>undef}); 
   my @rdirid=$o{'filemgmt'}->getHashList(qw(fid fullname name));
   my @res=$o{'filemgmt'}->LastMsg();
   if (defined($res[0])){  
      msg(ERROR,$res[0]);  
      exit(1);
   }
   # if remote and local dir given change it to one dir
   if ($mode eq "download"){ 
      msg(INFO,"mode -> download");
      if ($#rdirid == 0){
         if(!(-w "$ldir/".$rdir) && -e "$ldir/".$rdir){
            msg(ERROR,"no write access on '$ldir/$rdir'");
            exit(1);
         }
         @result=directoryLoop($rdirid[0]->{fid},$rdirid[0]->{fullname},
                 $rdirid[0]->{name},undef,$Config,$directorycount,$mode,$force); 
         if ($result[0] != 0){  
            msg(ERROR,$result[1]);  
            exit(1);
         }
      }else{
         msg(ERROR,"remote directory '$rdir' not exists or not unique!");
         exit(1);
      }
   }elsif($mode eq "upload"){
      msg(INFO,"mode=upload");
      if ($#rdirid == 0){
         @result=directoryLoop($rdirid[0]->{fid},$rdirid[0]->{fullname},
                 $rdirid[0]->{name},undef,$Config,$directorycount,$mode,$force); 
         if ($result[0] != 0){
            msg(ERROR,$result[1]);
            exit(1);
         }
      }else{
         msg(ERROR,"remote directory '".$rdir."' not exists or not unique!");
         exit(1);
      }
   }
   my @vol=volume();
   $ENV{TZ}=$tzorg;
   msg(INFO,"transfervolume $vol[0] $vol[1]");
   msg(INFO,"files          $files");
   msg(INFO,"warnings       $warnings");
   msg(INFO,"nothing to do!") if (action() == 0);
}

sub directoryLoop
{
   my $parentid=shift; 
   my $fullname=shift; 
   my $name=shift; 
   my $ppid=shift; 
   my $Config=shift; 
   my $directorycount=shift;
   my $mode=shift;
   my $force=shift;
   my $stepit=shift;
   my $mywin=shift;
   my (@lobj,@robj,@oplist);
   $fullname=~s/\\/\//g;
   $ldir=~s/$fullname+[\\\/]*$//g;
   if ($directorycount > 100){
      return(1,"directory depth to high, greater than 100");
   }
   # create local directory
   if (!(-d "$ldir/$fullname") && $mode eq "download"){
      $action=1;
      if ($force){
         my $stat=mkdir("$ldir/$fullname");
         if ($stat != 1){
            $action=0;
            return(1,"$ldir $!"); 
         }
      }
      if ($stepit){
         $fullname=~s/\//\\/g;
         &{$stepit}($mywin,"INFO: create directory $ldir\\$fullname ...done");
      }else{
         msg(INFO,"create directory $ldir/$fullname ...done");
      }
   }elsif(!(-w "$ldir/$fullname") && -e "$ldir/$fullname"){
      return(1,"no write access on '$ldir/$fullname'");
   }
   # create remote directory
   if ($mode eq "upload"){
      $o{'filemgmt'}->SetFilter({fid=>[$parentid]});
      my @sum=$o{'filemgmt'}->getHashList(qw(ALL));
      my @res=$o{'filemgmt'}->LastMsg();
      return(1,$res[0]) if (defined($res[0]));
      if ($#sum == -1){
         # check open directory
         if (!opendir(D,"$ldir/$fullname")){
            if ($stepit){
               $fullname=~s/\//\\/g;
               &{$stepit}($mywin,"WARN: can't open directory '$ldir\\$fullname'");
            }else{
               msg(WARN,"can't open directory '$ldir/$fullname'") if (!$nowarn);
            }
            $warnings++;
            return(0);
         }
         close(D);
         $action=1;
         if ($force){
            $parentid=$o{'filemgmt'}->storeRecord({name      => $name,
                                                   parentid  => $ppid,
                                                   parentobj => undef});
            my @res=$o{'filemgmt'}->LastMsg();
            return(1,$res[0]) if (defined($res[0]));
         }
         if ($stepit){
            $fullname=~s/\//\\/g;
            &{$stepit}($mywin,"INFO: create directory $ldir\\$fullname ...done");
         }else{
            msg(INFO,"create directory '$ldir/$fullname' ...done");
         }
      }
   }
   my @result=readRemoteDescList($parentid,\@robj,$stepit,$mywin);
   if ($result[0] != 0){
      return(1,$result[1]);
   }
   @result=readLocalDescList($fullname,\@lobj,$force,$stepit,$mywin);
   if ($result[0] != 0){
      return(1,$result[1]);
   }
   @result=calculateOperations(\@robj,\@lobj,\@oplist,
                               $mode,$parentid,$stepit,$mywin);
   if ($result[0] != 0){
      return(1,$result[1]);
   }
   @result=processOperations(\@oplist,$Config,$ldir,
                             $mode,$force,$stepit,$mywin);
   if ($result[0] != 0){
      return(1,$result[1]);
   }
   foreach my $operations (@oplist){
      if ($operations->{'IDENTIFYBY'} eq "dir" && 
          $operations->{'OP'} ne "delete"){
         @result=directoryLoop($operations->{'DATA'}->{'fid'},
                               $operations->{'DATA'}->{'fullname'},
                               $operations->{'DATA'}->{'name'},
                               $operations->{'DATA'}->{'parentid'},
                               $Config,$directorycount+1,
                               $mode,$force,$stepit,$mywin);
         if ($result[0] != 0){
            return(1,$result[1]);
         }
      }
      # delete local files/folder
      if ($operations->{OP} eq "delete" && $mode eq "download"){
         if ($force && -d "$ldir/".$operations->{DATA}->{fullname} &&
             !(-l "$ldir/".$operations->{DATA}->{fullname})){
            rmtree("$ldir/".$operations->{DATA}->{fullname}) ||
                            return(1,"delete $ldir/".
                                   $operations->{DATA}->{fullname}.
                                   " failed -> $!");
         }elsif($force){
            unlink("$ldir/".$operations->{DATA}->{fullname}) ||
                            return(1,"delete $ldir/".
                                   $operations->{DATA}->{fullname}.
                                   " failed -> $!");
         }
         if ($stepit){
            $action=1;
            $operations->{MSG}=~s/\//\\/g;
            &{$stepit}($mywin,"INFO: ".$operations->{MSG}." ...done");
         }else{
            msg(INFO,$operations->{MSG});
         }
      # delete remote files/folder
      }elsif($operations->{OP} eq "delete" && $mode eq "upload"){
         my $state="INFO";
         if ($force){
            $o{'filemgmt'}->SetFilter({fid=>[$operations->{DATA}->{fid}]});
            my @entrytyp=$o{'filemgmt'}->getHashList(qw(name entrytyp));
            my @res=$o{'filemgmt'}->LastMsg();
            return(1,$res[0]) if (defined($res[0]));
            # delete directory
            if ($entrytyp[0]->{entrytyp} eq "dir"){
               @result=reverseDelete($operations->{DATA}->{fid},$stepit,$mywin);
               if ($result[0] != 0){
                  $operations->{MSG}="$result[1] ".$operations->{DATA}->{fullname};
                  $state="WARN";
                  $warnings++;
               }
            # delete file
            }else{
               $o{'filemgmt'}->deleteRecord($operations->{DATA}->{fid});
               my @res=$o{'filemgmt'}->LastMsg();
               return(1,$res[0]) if (defined($res[0]));
            }
         }
         $action=1;
         if ($stepit){
            $operations->{MSG}=~s/\//\\/g;
            &{$stepit}($mywin,"$state\: ".$operations->{MSG}." ...done");
         }else{
            if ($state eq "WARN" && $nowarn){
            }else{
               msg($state,$operations->{MSG});
            }
         }
      }
   }
   return(0);
}

sub reverseDelete
{
   my $parentid=shift;
   my $stepit=shift;
   my $mywin=shift;
   $o{'filemgmt'}->SetFilter({parentid=>[$parentid]});
   my @files=$o{'filemgmt'}->getHashList(qw(fid entrytyp name));
   foreach my $file (@files){
       &{$stepit}($mywin,"INFO: delete ".$file->{name}." ...done") if ($stepit);
      if ($file->{entrytyp} eq "dir"){
         reverseDelete($file->{fid});
      } 
      $o{'filemgmt'}->deleteRecord($file->{fid});
   }
   $o{'filemgmt'}->deleteRecord($parentid);
   my @res=$o{'filemgmt'}->LastMsg();
   return(1,$res[0]) if (defined($res[0]));
   return(0);
}

sub readRemoteDescList
{
   my $parentid=shift;
   my $robj=shift;
   my $stepit=shift;
   my $mywin=shift;
   if ($parentid){
      $o{'filemgmt'}->SetFilter({parentid=>[$parentid]});
      @$robj=$o{'filemgmt'}->getHashList(qw(ALL));
      my @res=$o{'filemgmt'}->LastMsg();
      return(1,$res[0]) if (defined($res[0]));
   }
   # change timestamp from mdate in a unixtimestamp
   foreach my $rec (@$robj){
      &{$stepit}($mywin) if ($stepit);
      foreach my $key (keys(%$rec)){
         if ($key eq "mdate"){
            my @time=split(/[- :TZ]/,$$rec{$key});
            $$rec{mdatestamp}=mktime($time[5],$time[4],$time[3],
                               $time[2],$time[1]-1,$time[0]-1900,0,0,-1);
         }
         $$rec{fullname}=encode("iso-8859-1",$$rec{fullname});
         $$rec{name}=encode("iso-8859-1",$$rec{name});
      }
   }

   return(0);
}

sub readLocalDescList
{
   my $fullname=shift;
   my $lobj=shift;
   my $force=shift;
   my $stepit=shift;
   my $mywin=shift;
   my $dir="$ldir/$fullname";
   
   local *FH;
   if (opendir(FH,"$dir")){
      while (defined(my $file=readdir(FH)))
      {
         $dir=encode("iso-8859-1",$dir);
         $fullname=encode("iso-8859-1",$fullname);
         $file=encode("iso-8859-1",$file);
         &{$stepit}($mywin) if ($stepit);
         my $mdatestamp=(stat("$dir/$file"))[9];
         my $mdate=strftime("%Y-%m-%d %H:%M:%S",localtime($mdatestamp));
         if ($file ne "." && $file ne ".."){
            if (-d "$dir/$file" && !(-l "$dir/$file")){
               push(@$lobj,{entrytyp   => 'dir',
                            fullname   => "$fullname/$file",
                            name       => "$file",
                            mdatestamp => "$mdatestamp",
                           });
            }elsif(open(IN,'>>'.$dir."/".$file)){
               if((-f "$dir/$file") && (-s "$dir/$file") && (-r "$dir/$file")){
                  push(@$lobj,{entrytyp    => 'file',
                               fullname    => "$fullname/$file",
                               name        => "$file",
                               mdatestamp  => "$mdatestamp",
                               mdate       => "$mdate",
                              });
               }elsif(-l "$dir/$file"){
                  push(@$lobj,{entrytyp    => 'link',
                               fullname    => "$fullname/$file",
                               name        => "$file",
                               mdatestamp  => "$mdatestamp",
                               mdate       => "$mdate",
                              });
               }elsif(-z "$dir/$file" && (-f "$dir/$file")){
                  push(@$lobj,{entrytyp    => 'zerofile',
                               fullname    => "$fullname/$file",
                               name        => "$file",
                               mdatestamp  => "$mdatestamp",
                               mdate       => "$mdate",
                              });
               }      
            }else{
                  push(@$lobj,{entrytyp    => 'permission',
                               fullname    => "$fullname/$file",
                               error       => "$!",
                               name        => "$file",
                               mdatestamp  => "$mdatestamp",
                               mdate       => "$mdate",
                              });
            }
            close(IN);
         }
      }         
      closedir(FH);
   }else{
      return(1,"can't open directory $dir ") if ($force);
   }
   return(0);
}

sub calculateOperations
{
   my $refrobj=shift;
   my $reflobj=shift;
   my $oplist=shift;
   my $mode=shift;
   my $pid=shift;
   my $stepit=shift;
   my $mywin=shift;
   # delete remote files, update,insert local files
   foreach my $rfile (@$refrobj){
      &{$stepit}($mywin) if ($stepit);
      my $found=0;
      foreach my $lfile (@$reflobj){
         if ($mode eq "upload"){
            if ($lfile->{'fullname'} eq $rfile->{'fullname'} &&
               $lfile->{'entrytyp'} ne "zerofile"
               && $lfile->{'entrytyp'} ne "permission"){
               $found=1;
            }
         }elsif($mode eq "download"){
            if ($lfile->{'fullname'} eq $rfile->{'fullname'} &&
                $lfile->{'mdatestamp'} eq $rfile->{'mdatestamp'} &&
                $lfile->{'entrytyp'} eq $rfile->{'entrytyp'}){
               $found=1; 
            }elsif($lfile->{'fullname'} eq $rfile->{'fullname'} &&
                $lfile->{'mdatestamp'} ne $rfile->{'mdatestamp'} &&
                $lfile->{'entrytyp'} eq $rfile->{'entrytyp'} &&
                $rfile->{'entrytyp'} ne "dir"){
               $found=2;
            }
         }
      }
      if ($found == 0 && $mode eq "download"){
         push(@$oplist,{OP          => 'insert',
                       DATAOBJALIAS => 'filemgmt',
                       IDENTIFYBY   => $rfile->{'entrytyp'}, 
                       MSG          => "insert ".$rfile->{'entrytyp'}." ".
                                       $rfile->{'fullname'},
                       DATA         => {fullname   => $rfile->{'fullname'},
                                        name       => $rfile->{'name'},
                                        fid        => $rfile->{'fid'},
                                        contentsize=> $rfile->{'contentsize'},
                                        mdatestamp => $rfile->{'mdatestamp'},
                                        file       => $rfile->{'file'}}});
      }elsif($found == 2 && $mode eq "download"){
         push(@$oplist,{OP          => 'update',
                       DATAOBJALIAS => 'filemgmt',
                       IDENTIFYBY   => $rfile->{'entrytyp'}, 
                       MSG          => "update ".$rfile->{'entrytyp'}." ".
                                        $rfile->{'fullname'},
                       DATA         => {fullname    => $rfile->{'fullname'},
                                        mdatestamp  => $rfile->{'mdatestamp'},
                                        fid         => $rfile->{'fid'},
                                        name        => $rfile->{'name'},
                                        contentsize => $rfile->{'contentsize'},
                                        file        => $rfile->{'file'}}});
      }elsif($found == 0 && $mode eq "upload"){
         push(@$oplist,{OP          => 'delete',
                        DATAOBJALIAS => 'filemgmt',
                        IDENTIFYBY   => $rfile->{'entrytyp'},
                        MSG          => "delete ".$rfile->{'entrytyp'}." ".
                                         $rfile->{'fullname'},
                        DATA         => {fullname  => $rfile->{'fullname'},
                                         fid       => $rfile->{'fid'},
                                         name      => $rfile->{'name'}}});
      }
   }
   # delete local files, update,insert remote files
   foreach my $lfile (@$reflobj){
      &{$stepit}($mywin) if ($stepit);
      my $found=0;
      my ($fid,$file,$parentid);
      foreach my $rfile (@$refrobj){
         $parentid=$rfile->{parentid};
         if ($mode eq "download"){
            if (($lfile->{'fullname'} eq $rfile->{'fullname'}) &&
                ($rfile->{'contentsize'} != 0 || $rfile->{'entrytyp'} eq "dir")){
               $found=1;  
            }
         }elsif($mode eq "upload"){
            foreach my $rfile (@$refrobj){
               if ($lfile->{'fullname'} eq $rfile->{'fullname'} &&
                   $lfile->{'mdatestamp'} eq $rfile->{'mdatestamp'} &&
                   $lfile->{'entrytyp'} eq $rfile->{'entrytyp'} ){
                  $found=1;
               }elsif($lfile->{'fullname'} eq $rfile->{'fullname'} &&
                   $lfile->{'mdatestamp'} ne $rfile->{'mdatestamp'} &&
                   $lfile->{'entrytyp'} eq $rfile->{'entrytyp'}){
                  $found=2;
                  $fid=$rfile->{'fid'};
                  $file=$rfile->{'file'};
               }
            }
         }
      } 
      if ($found == 0 && $mode eq "download"){
         push(@$oplist,{OP          => 'delete',
                        DATAOBJALIAS => 'filemgmt',
                        IDENTIFYBY   => $lfile->{'entrytyp'}, 
                        MSG          => "delete ".$lfile->{'entrytyp'}." ".
                                         $lfile->{'fullname'},
                        DATA         => {fullname  => $lfile->{'fullname'},
                                         name      => $lfile->{'name'}}});
      }elsif($found == 0 && $mode eq "upload" && $lfile->{'entrytyp'} ne "zerofile" &&
            $lfile->{'entrytyp'} ne "permission"){
         $parentid=$pid if ($parentid eq "");
         push(@$oplist,{OP          => 'insert',
                       DATAOBJALIAS => 'filemgmt',
                       IDENTIFYBY   => $lfile->{'entrytyp'}, 
                       MSG          => "insert ".$lfile->{'entrytyp'}." ".
                                       $lfile->{'fullname'},
                       DATA         => {fullname   => $lfile->{'fullname'},
                                        name       => $lfile->{'name'},
                                        fid        => undef,
                                        parentid   => $parentid,
                                        mdatestamp => $lfile->{'mdatestamp'},
                                        mdate      => $lfile->{'mdate'},
                                        file       => ''}});
      }elsif($found == 2 && $mode eq "upload" && $lfile->{'entrytyp'} ne "zerofile" &&
            $lfile->{'entrytyp'} ne "permission"){
         push(@$oplist,{OP          => 'update',
                       DATAOBJALIAS => 'filemgmt',
                       IDENTIFYBY   => $lfile->{'entrytyp'}, 
                       MSG          => "update ".$lfile->{'entrytyp'}." ".
                                       $lfile->{'fullname'},
                       DATA         => {fullname    => $lfile->{'fullname'},
                                        mdatestamp  => $lfile->{'mdatestamp'},
                                        mdate      => $lfile->{'mdate'},
                                        fid         => $fid,
                                        parentid    => $parentid,
                                        name        => $lfile->{'name'},
                                        file        => $file}});
      }elsif(($found == 2 || $found == 0) && $mode eq "upload"
             && $lfile->{'entrytyp'} eq "zerofile"){
         push(@$oplist,{OP          => 'info',
                       DATAOBJALIAS => 'filemgmt',
                       IDENTIFYBY   => 'file',
                       MSG          => "file ".$lfile->{'fullname'}.
                                       " has zero size, will be ignored!"});
      }elsif($lfile->{'entrytyp'} eq "permission"){
         push(@$oplist,{OP          => 'info',
                       DATAOBJALIAS => 'filemgmt',
                       IDENTIFYBY   => 'file',
                       MSG          => $lfile->{'fullname'}." ".$lfile->{'error'}});
      }
   }
   return(0);
}

sub processOperations
{
   my $oplist=shift;    
   my $Config=shift;    
   my $ldir=shift;    
   my $mode=shift;    
   my $force=shift;    
   my $stepit=shift;    
   my $mywin=shift;    
   my $size;
   my $ua=getUserAgent($Config);
   foreach my $rec (@$oplist){
      if ($rec->{IDENTIFYBY} eq "file" && ($rec->{OP} eq "update" || 
          $rec->{OP} eq "insert")){
         my $t="byte";
         if ($mode eq "download"){
            $size=$rec->{DATA}->{contentsize}; 
         }else{
            $size= -s "$ldir/$rec->{DATA}->{fullname}";        
         }
         $volume=$volume+$size;
         $files++;
         if ($size > 1024){
            $size=sprintf("%.2f",$size/1024);
            $t="kbyte";
         }
         if ($size > 1024){
            $size=sprintf("%.2f",$size/1024);
            $t="mbyte";
         }
         if ($stepit){
            $rec->{MSG}=~s/\//\\/g;
            &{$stepit}($mywin,"INFO: ".$rec->{MSG}." ".$size." $t",1);
         }else{
            msg(INFO,$rec->{MSG}." ".$size." $t");
         }

         if ($force && $mode eq "download"){
            my $req=$ua->get($rec->{DATA}->{file},
                    ':content_file' => "$ldir/".$rec->{DATA}->{fullname}.".tmp");
            if (!$req->is_success){
               return(1,$req->status_line);
            }else{
               rename("$ldir/".$rec->{DATA}->{fullname}.".tmp",
                      "$ldir/".$rec->{DATA}->{fullname}) || 
                      return(1,"rename $ldir/".
                             $rec->{DATA}->{fullname}." failed -> $!");
               utime($rec->{DATA}->{mdatestamp},$rec->{DATA}->{mdatestamp},
                     "$ldir/".$rec->{DATA}->{fullname}) ||
                      return(1,"utime $ldir/".
                             $rec->{DATA}->{fullname}." failed -> $!");
            }
         }elsif($force && $mode eq "upload" && ($rec->{OP} eq "update" ||
                $rec->{OP} eq "insert")){
            my $sep="/";
            $sep="\\" if ($os eq "MSWin32");
            msg(DEBUG,"prepare upload '$rec->{DATA}->{name}'");
            my $sendfile = MIME::Entity->build(
                    Encoding    => "base64",
                    Path        => $ldir.$sep.$rec->{DATA}->{fullname},
                    Filename    => $rec->{DATA}->{name},
                    Disposition => "attachment");
            msg(DEBUG,"start upload '$rec->{DATA}->{name}'");
            my $fid=$o{'filemgmt'}->storeRecord({file      =>  $sendfile,
                                                parentid   =>  $rec->{DATA}->{parentid},
                                                },
                                               $rec->{DATA}->{fid});
            msg(DEBUG,"upload done'$rec->{DATA}->{name}'");
            # read modifydate from the stored record
            $o{'filemgmt'}->SetFilter({fid=>[$fid]});
            my @mdate=$o{'filemgmt'}->getHashList(qw(mdate));
            my @res=$o{'filemgmt'}->LastMsg();
            if (defined($res[0]) && $stepit){
               &{$stepit}($mywin,$res[0]);
               next;
            }
            return(1,"record fid=$fid not found!") if ($#mdate != 0);

            # change the datestamp to a unixtimestamp
            my @time=split(/[- :]/,$mdate[0]->{mdate});
            my $mdate=mktime($time[5],$time[4],$time[3],
                             $time[2],$time[1]-1,$time[0]-1900,0,0,-1);
            my @res=$o{'filemgmt'}->LastMsg();
            if (defined($res[0])){
               return(1,$res[0]);
            }else{
               utime($mdate,$mdate,"$ldir/".$rec->{DATA}->{fullname}) ||
                  return(1,"utime $ldir/".$rec->{DATA}->{fullname}." failed -> $!");
            }
         }
         $action=1;
         if ($stepit){
            &{$stepit}($mywin,"  ...done");
         }
      }elsif($rec->{OP} eq "info"){
         $warnings++;
         if ($stepit){
            $rec->{MSG}=~s/\//\\/g;
            &{$stepit}($mywin,"WARN: ".$rec->{MSG});
         }else{
            msg(WARN,$rec->{MSG}) if (!$nowarn);
         }
      }
   }
   return(0);
}

sub action
{
   if ($action == 0){
      return(0);
   }else{
      $action=0;
      return(1);
   }
}

sub volume
{
   my $v=$volume;
   $volume=0;
   my $t="byte";
   if ($v > 1024){
      $v=sprintf("%.2f",$v/1024);
      $t="kbyte";
   }
   if ($v > 1024){
      $v=sprintf("%.2f",$v/1024);
      $t="mbyte";
   }
   return($v,$t);
}

# help menu
sub Help
{
   print(<<EOF);
$RealScript [options] 

   --verbose    display more details of operation process
   --quiet      only errors would be displayed
   --base       base url of filemgmt [default:$DefaultBase]
   --webuser    username
   --webpass    password
   --store      stores the parameters (not help,verbose and store)
   --help       show this help
                
   --mode       download or upload [default:download]
   --rdir       remote directory
   --ldir       local directory
   --force      write data  
   --nogui      for commandline usage in win32 systems only,
                default is gui on
   --nowarn     prevent warnings
   --admin      enable admin options
   --autostart  sync automatically, in win32 mode only
EOF
}
exit(255);

#####################################################################################
sub WindowIcon{
q(
AAABAAEAEBAAAAEAIADUAgAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAWwAA
AAAAAAAAAAAALfT+AC30/wA/9f8AQPX/AEb1/wBG9v8ASfX/AFT2/wBW9v8AV/b/AGFg7wBq9/4A
avf/AGv3/wBtbfEAdvj/AHf4/wB5ePIAgPj+AID4/wCB+P8Agfn/AImI9ACJifQAlJT1AJf5/gCX
+f8Al/r/AJiZ9QCY+v4AmPr/AJn5/wCa+f8Ao4tjAKSKYgClpPYAqZNsAK36/wCt+/8Arpp2ALCw
9wCznnwAtLT4ALaiggC3ufgAvaqMAL29+AC98P4Avs36AL7u6wDAr5EAwL/5AMHt6gDB+/8Awfz/
AML8/gDDspcAxracAMa3nADHxvkAx+r8AMm7ogDMvqcAzs76AM79/wDPwq0A0PDsANLGsgDT2swA
1NT7ANT9/wDVyrcA1f3/ANbPvQDW1fIA2M28ANrb+wDe1ccA39fJAODYygDh2csA5t/UAOfn/ADo
4dcA6ePZAOrl2wDr/v8A7e39AO7r4gD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAB8JBREAAAAAAAAAKCIjACEMCAMBBwAAAAAAOygiIzUaFg0IBAIQAAAATzouKiUy
Jh8UDggDBgAAAFBEPjMsQzgmHBMMCAoAAABWTkg/OUVHNicbFQ0eAAAAAFVRTEJKV0k3JxwgAAAA
AAAAWVRSSy0xPTBBAAAAAAAAAAAAAEYpGRILAAAAAAAAAAAAAABNNCQXDwAAAAAAAAAAAAAAWEAr
HRgAAAAAAAAAAAAAAABTPC8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//
AAD//wAA/w8AAOIHAADAAwAAgAMAAIADAACAAwAAwAcAAOAPAAD8HwAA/B8AAPwfAAD+PwAA//8A
AP//AAA=
);
} 

sub WindowImg{
q(
Qk14NwAAAAAAADYAAAAoAAAAWgAAADQAAAABABgAAAAAAEI3AAASCwAAEgsAAAAAAAAAAAAAmJiY
sbGxr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+v
r6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+v
r6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vrq6u
rq6urq6urq6ura2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2trq6urq6u
r6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vsbGxmJiYICCxsbH////+/v7+/v7+/v7+
/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+
/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+
/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v79/f3+/v7+/v79/f39/f38/Pz7+/v7+/v6+vr5+fn6
+vr5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn6+vr6+vr8/Pz9/f39/f3+/v7+/v7+
/v7+/v7+/v7+/v7+/v7+/v7+/v7///+xsbEgIK6urv39/fHx8fLy8vLy8vLy8vLy8vLy8vLy8vLy
8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy
8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy
8vLy8vLy8vHx8fDw8O/v7+/v7+3t7erq6unp6ejo6Ofn5+Xl5eTk5OPj4+Li4uPj4+Li4uLi4uLi
4uLi4uHh4eHh4eHh4eLi4uLi4uPj4+Xl5eXl5ejo6Onp6erq6uzs7O7u7u/v7/Hx8fLy8vLy8vLy
8vLy8vHx8f39/a6uriAgrq6u/f398vLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy8vLy8PDw7u7u
6urq6Ojo5OTk4ODg3d3d2tra19fX1dXV1NTU0tLS0dHR0dHR0dHR0NDQ0NDQz8/Pz8/Pz8/Pz8/P
0NDQ0dHR0tLS1dXV1tbW2dnZ3d3d4ODg5OTk6Ojo6enp7e3t8PDw8vLy8fHx8vLy8vLy/f39rq6u
CiCurq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py8vLv7+/t7e3p6enj4+Pc3NzV1dXPz8/J
ycnFxcXAwMC+vr69vb27u7u5ubm4uLi4uLi3t7e3t7e2tra2tra2tra2tra2tra3t7e6urq+vr7A
wMDExMTJycnQ0NDV1dXb29vh4eHn5+fr6+vu7u7w8PDy8vLy8vL9/f2urq4gIK6urv39/fLy8vPz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Hx8e3t7efn5+Dg4NbW1svLy8DAwLe3t66urqioqKOjo6CgoJ2d
nZubm5iYmJiYmJiYmJeXl5eXl5eXl5aWlpaWlpeXl5eXl5iYmJqamp+fn6Ojo6mpqa+vr7m5ucHB
wcrKytXV1d7e3uXl5evr6+/v7/Hx8fLy8v39/a6uriAgrq6u/f398vLy8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8vLy8PDw6urq4uLi1tbWyMjIuLi4qampm5ubj4+Ph4eHg4ODf39/fX19enp6d3d3dnZ2dXV1
c3NzcXFxb29vcHBwcHBwcHBwcnJyc3NzdnZ2fHx8g4ODiYmJlJSUn5+frKysubm5x8fH1dXV4eHh
6Ojo7e3t8PDw8vLy/f39rq6uICCurq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py8vLu7u7n5+fb
29vNzc27u7ulpaWTk5OEhIR3d3dqampfZGRWYmROXmJMXWFJW11LW11PWlxTVlZVVVVVVVVSUlJR
UVFRUVFTU1NVVVVZWVleXl5mZmZvb295eXmIiIiYmJipqam7u7vLy8va2trl5eXr6+vw8PDy8vL9
/f2urq4gIK6urv39/fLy8vPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8uzs7OTk5NjY2MXFxbGxsaCgoIyM
jG1yc0pudDB4hCGMnxadtBGivBGiuxGivBGiuxeYrx+HmCxteTlSV0JFRUZGRkRERENDQ0VFRUhI
SE9PT1dXV19fX2tra3x8fI6Ojp+fn7Ozs8bGxtfX1+Pj4+rq6vDw8PLy8v39/a6uriAgrq6u/f39
8vLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy7Ozs5OTk1dXVzMzMu7u7gZGTQoqXHaC5C7rYC7/gDLvb
DLXVDrPQDrPQDrLQDbPQDbbUDrrZDrrYEqjCHIabMF1lQ0lKSEZGRURESUlJT09PVVVVX19fampq
e3t7jIyMnp6es7OzxsbG19fX4+Pj6urq8PDw8vLy/f39rq6uICCurq79/f3y8vLz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Py8vLy8vLx8fHw8PDw8PDw8PDv7+/v7+/u7u7t7e3t7e3t7e3u7u7w8PDw8PDy
8vLy8vLz8/Py8vLs7Ozk5OTl5eXGyMhinacTu9gBzvUByfAAweQCutwCt9gEtdUGs9IJr84MrMkN
q8cNq8YNqcYNrMgNtNEOutkPs9EfjqI/XmRYV1dWVlVbW1tjY2NsbGx3d3eIiIiYmJioqKi7u7vM
zMzc3Nzm5ubr6+vw8PDy8vL9/f2urq4gIK6urv39/fLy8vPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8vDw8O/v7+zs7Onp
6eXl5eHh4d/f397e3t3d3dzc3Nvb29nZ2dfX19fX19fX19fX19zc3ODg4OXl5erq6u/v7/Dw8O3t
7fLy8s/S00WvwgLY/wDT+wDJ8ADG7ADF6wDF6gDD6ADC5gC/4gG73QS21wey0AuvzA2syg2syA2r
xg2rxw2xzg662BOsx0N2f3Rycnh2dXt7e4SFhY+Pj5ycnKurq7i4uMbGxtTU1ODg4Ojo6O3t7fHx
8fLy8v39/a6uriAgrq6u/f398vLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8fHx6+vr5eXl3d3d1dXVzc3NxcXFwMDAvLy8urq6
uLi4tra2tbW1srKyr6+vrq6urq6usbGxtra2vr6+ycnJ1dXV4uLi6urq8/Pzz9TVP73RAOD/ANP7
AM71AM/2AM/2AM30AMzzAMryAMrwAMfsAMTpAMDlAL3fBLjZCLPTC67LDazIDavIDavHDavIDbTS
E7XTToqVnp6eo6OjoqKiq6urtra2wMDAycnJ1dXV3d3d5eXl6+vr7+/v8fHx8vLy/f39rq6uICCu
rq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Px8fHp6enc3NzMzMy9vb2tra2jo6Obm5uWlpaQkJCNjY2KioqGhoaFhYWEhISC
goKBgYGBgYGEhISIiIiRkZGgoKCzs7PKysrv7+/a3N1Bw9QB5v8B1fsB1PoA1PoA1PoA1PoA1PkA
0/kA0vgA0fgAzvUAzPIAyO4AxusAwuYAvd8EttgJsc8NrMkNq8gNq8gNq8gNsc8Oudhjlp/JycnF
xcXExMTMzMzU1NTa2trg4ODn5+fr6+vu7u7w8PDy8vLy8vL9/f2urq4gIK6urv39/fLy8vPz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Hx8evr
69vb28HBwaWlpZGRkYSEhH19fXR0dG9vb2tra2xsbGtra2hoaGJiYl5eXl1dXV1dXV1dXV5eXmJi
YmhoaHV1dYqKiri4uNfY2Fa5xgTq/wTW/AbX+gbX+gbW+gbW+gXW+gTV+gPW+gLW+gLV+gHU+gDR
+ADP9gDN8wDJ7gDF6wDA5QK63Qe00wuuyw2syA2syA2rxw2xzxe41Y2prejo6N3d3d/f3+Pj4+fn
5+np6e3t7fDw8PLy8vLy8vLy8vLy8v39/a6uriAgrq6u/f398vLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8PDw5OTkyMjIpKSkhoaGb29v
X1hXVUZGUzs8TzI0UDI0UTk6T0BBU0xMUlNTU1NTTExMTExMTExMTU1NTU1NUFBQWlpac3Nzqamp
bqauCuz/Cdz9Ctj6C9j6C9j6C9j6C9j6Ctj6Cdf6CNb6B9j6Btb6Bdb6A9b6ANX6ANP5AM/3AMvz
AMjuAMPnAb7iBLbXC67MDazIDavIDanFDbbVJbTOxczN8vLy6+vr7e3t7u7u8PDw8vLy8/Pz8/Pz
8/Pz8/Pz8vLy/f39rq6uICCurq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pv7+/e3t6/v7+YmJhpXVxgNzVmJSJoHRxoHBxlGxxh
Gx1eGx1cHR9XISNTLzFQREZNUFBLTExLS0tLS0tKSkpLS0tUVFR2dnZ+j5Ih1OQO6P8Q2PoQ2voR
2foR2foR2/oR2voR2voP2voN2foM2foL2foJ1/oH1/oE1voC1voB1PoA0vkAzvUAyfAAxOsAv+ID
t9gKsM0NrMkNq8gNqsYOvNtXqbfs7e3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py8vL9/f2u
rq4gCq6urv39/fLy8vPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8+/v7+jo6MC/v3xbVX4rIIMmGn4kG3kiGXMfGW4cGWgbGWIZGlwaGlwZHV4a
Hl0gIlEzNFFPT1JTU1FRUVNTU1lZWWdlZoaDg1GgrBTw/xXa+hfc+hjc+hjc+hnd+hnc+hjc+hfc
+hXb+hTb+hLb+hHa+g7a+gzZ+gnY+gfX+gTW+gLW+gDT+gDP9gDL8QDF6gC/5AO42QqwzQysyA2s
xw2tyRK41aXGzPPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8v39/a6uriAgrq6u/f398vLy
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz39/ejWNdkS4fjS0ciCwchischCkbgScZfCQZdiAZcB4aZxsZXxkaWBgaWRgbXRodVi8xY2Bg
Z2hoaWlpdHR0ioqKkJmbLs7kGub/Htv6Ht76H976IN76IN76IN76IN76Ht76HN36G936Gdz6F9z6
Fdv6Etr6Dtr6DNj6CNf6Btf6A9X6ANT6AND3AMvyAMXsAL/kA7fXCq/MDavIDavICKrHXs7i8PLz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy/f39rq6uICCurq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pu7e2ZdG+dNyeSMiSP
MiSPMiWPMSKNMCGKLh+JLByFKRuAJhl2IBluGxlkGhlaGRtXGBteGh1hPT+OjY6ZmZmenp6/v7+B
pqwi6/8i3fsl3vom4Pon4Pop3/oo3/op4Poo4Pon4Pol3/oi3/oh3fof3voc3PoY2/oU3PoS2voO
2foK2PoH1/oC1voA1PoA0PgAy/IAxusAv+IEt9YMrcsNq8gLq8YgtM7K6e/z8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Py8vL9/f2urq4gIK6urv39/fLy8vPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz87uno5s5LJw6LZg5LZk5LZg5LJc5K5U3KZI0
J48xI4wvIIksHYQpGnsjGXEeGWYbGVsZG1cYG2AdH4Rxc9HR0c7Ozt/f3168ySjr/yre+i3h+i/h
+jDh+jLh+jLh+jLh+jHh+jDh+i7g+ivg+inf+ibf+iPf+iDd+hvd+hfb+hPb+g7Z+grY+gbX+gPW
+gHU+gDQ9wDL8QDF6gC+4Aez0w2tyQyrxwmrx6DZ4/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly
8v39/a6uriAgrq6u/f398vLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz6+Dfu2NanjwwokI3pEI4o0I4o0I3oUE1nz8znDwvmDgslDUokDIkiy4f
hysbfyUZch8ZZhoZWxkaWxkbajI1wr/A8/Pz1tnZQdjtMOX+M+L6NuP6OeL6OuL6O+T6POT6POT6
O+T6OuP6OOP6NeL6MuL6LuD6K+D6JuD6Id76Hd36Gd36FNv6D9n6C9j6B9b6BNX6ANT6AM/2AMrv
AMPoArvdCbHPDavIB6rIfczc8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy/f39rq6uICCurq79
/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/PXr6unQzqrRz6sSkGuSkOvSkOtSkKqSD+pRjykQzigPzScOy+XNyqRMiWNLiCIKxx+JRlxHRlk
GhlZGBpgHB+UgYLz8/O4xcc84vQ35P074/o+5PpA5PpC5PpE5fpE5PpE5fpD5fpC5PpA4/o94/o5
4/o14voy4vot4foo3/oj3voe3foZ3PoU2/oP2voK2foG1voC1foA0/kAzvUAx+4AwOQEt9YMrssL
qsdYxdjq8fLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py8vL9/f2urq4gIK6urv39/fLy8vPz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Lv78d9dq5LRbRQS7dT
TblUTrpUTrhUTbZRS7NPR69MQ6pIP6RDOJ49Mpg4LJIzJo0uIYYrHHwkGW8dGWEaGV8ZHWpAQsXD
w4mlqT/n9UDm/ETk+kfl+krm+kvn+k7m+k7n+k7n+k3n+kvm+knm+kbl+kLk+j7k+jrj+jXi+i/g
+ing+iTf+h/d+hnc+hTb+g/a+grZ+gXW+gLV+gDR+ADL8gDE6gG84Aiy0Q6rx0PA1t7u8PPz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8v39/a6uriAgrq6u/f398vLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz7uDfxGtmu1ZRwVtXxF5axV9bxF5bxF5awltX
vVhTuVVPtFBJrktDp0U7oD80mTktkjMmjC4ghiobeSIZahwZYRobWiEiYFVVUXp/Rej1Sej8Teb6
Uef6VOj6Vej6WOj6Wen6WOn6WOn6Vuj6U+j6UOf6S+b6R+b6QuT6PeT6NuL6MeL6KuD6JN/6Ht76
Gdz6E9v6Ddj6CNf6BNb6AdX6AND2AMjwAMHnA7jYC67MP7vS2+zv8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8vLy/f39rq6uICCurq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Po0tDGamfGX13LY2HOZmTPZ2bPZmbNZmXLY2HHYF3CXFm8V1K1Ukuu
S0KnRTufPzOYOCuRMiSJLR6BJhlxHhlnGxlcGx07Jy40Y2tM6fRR6fxV5/pY6fpb6fpd6fpg6vph
6vpg6fpg6vpe6vpb6fpY6PpS6PpO5/pJ5vpE5fo94/o34vow4foq4Poj3/od3foX3PoR2voL2PoG
1/oD1voB0vkAy/IAxOoAvN8IsdFCv9Xf7fDz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py8vL9/f2urq4g
IK6urv39/fLy8vPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8+jPz85vbtFoaNVrbNhucNlwcdlwcddvcNVsbNFpaMxkY8VfXL5ZVLdSTK5KQ6VDOp08MZU1
KYwvIYYqHHojGm0bEl0bGDgajzVo0lXr+Vjq+17p+mHp+mXq+mfr+mrr+mrr+mnr+mnr+mbr+mTq
+mHp+lzp+lfo+lLo+kvm+kTk+j3j+jfi+i/h+ijf+iHe+hvd+hTb+g7Z+gjX+gTW+gDU+gDP9gDH
7gDA5QS21kzC1+fv8fPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8v39/a6uriAgrq6u/f398vLy8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz69PT13Z32W9x
3HN233Z54Xh74Xh74Hd63XN22XBy1GtrzWZkxl9cvllTtVBKq0c/okE2mTotkDMlii4fgCcadB0R
YxsTMhStMl3+W+v8YOv6Zer6aer6bev6cO36cez6cuz6cuz6cez6buz6bOv6aOr6Y+n6Xur6WOj6
Uub6S+f6Q+X6POP6NOH6LeD6Jd/6H936GNv6Etn6DNj6B9f6AdX6ANH4AMvzAMTpALncb8na8PLy
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy/f39rq6uICCurq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pv3t7egoPhd3nlen/ofYLqf4TqfoTp
foPme3/ieHvccnTUbG3NZWTDXlu7VlCxTEWoRTydPTGUNSiMLyGFKhx8IhBmHB8bCKYUKONd3fhp
7/pt6/px7Pp17fl47vl67vl77vl77vl67vl37fl07fpx7Ppr6/pm6/pe6vpY6PpR6PpJ5vpB5fo6
4/oz4vop4Poi3vob2/oU2voO2foJ2PoE1voB1PoAzvUAxuwAveKW0d7z8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Py8vL9/f2urq4gIK6urv39/fLy8vPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Lt7eSRlOd7gOuAhu6DivGFi/CEi/CDiuyAh+h9geF3e9px
c9JqacliYL9aVbVRSqtIP6FANJc3K48xJIgrHYMlCloaOwkFuwAEy1C17nL4/HLs+nfu+nvu+X7v
+YHw+YLv+YHv+YDv+X3u+Xru+nft+nHt+mzs+mTq+l7q+lbo+k7n+kbl+j3j+jbi+i3h+ibg+h7d
+hbc+hDa+gvY+gbX+gHV+gDQ9wDI7wrB5rrd5fPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8v39
/a6uriAgrq6u/f398vLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz7ba37H+F8YWM84eO84eO84eO84eO8YSM7YKG5nyA33Z41m5uzmZlw11ZuFRN
rktCo0I3mTktkTMliy0bhigKRRppBQrOAAC+M2rZev3+eO35fe/5gvD5hfD5h/D5iPH5iPD5h/D4
hPD5gO/5fe75d+76ce36auz6Y+r6W+j6Uuf6Seb6QOT6OeP6MOH6KeD6Id76Gdz6Etr6DNn6B9f6
Atb6ANL4AMrwLcno3ezv8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy/f39rq6uICCurq79/f3y
8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py
3Nzvi5DyhY3zh47zh47zho7zh47zh47whIvqf4TieHzacXLRaGjGX1y6VlCwTUWmRDqbOy+SNCeP
LRaBKR8wIacOFtILBr4UJMdx3vaD+PyC7/mH8PmK8fmN8fmO8fiO8fiM8fiJ8fmG7/mC7/l87vl3
7fpv7Ppn6/pg6fpX6PpO5vpF5Po84/oz4vor4foj3vob3PoU2voN2foI1/oD1foA0vkAy/NV1Ovz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py8vL9/f2urq4gIK6urv39/fLy8vPz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Px8fO/vvOGjvOHjvOH
jvOHjvOHjvOHjvKFjeyAhuR6ftxydNNqashhXrxXUrFOR6ZFO5w8MJM0JpEsD2cxZygu2SIjzRkX
xQsHv02N4Iz//obx+Yzx+Y/y+ZLy+JLy+JLy+JHy+I7y+Yrw+Ybw+YDv+Xnu+XLt+mvs+mLq+lnp
+lDn+kfl+j7k+jXi+i3h+iXf+h3d+hXb+g/a+gnY+gTW+gDT+g7N8sDq8fPz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Ly8v39/a6uriAgrq6u/f398vLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8+3t8qqt84WO9IeO84eO84eO84eO8oWN
7ICG5Hp+3HJ102pqyGFevVdSsU5GpkU7nDwwlzAWgjdGTEfQOj/dNDPOJibLFAzCIDDJf+D2k/39
jvD4k/L4k/L4k/L4k/L4k/L4kfL4jvH5ivD5g+/5fe/5de75buz6Zer6XOn6U+j6Sub6QeT6OOP6
L+H6Jt/6Ht36Ftv6D9r6Ctj6A9b7AdT6eN3x8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8vLy/f39rq6uICCurq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py5OTvoKX0ho70h47yho3yh47xhYzrf4TjeX3bcnTSaWnH
YF27V1KxTkenQzafNh2OPkZlW8tTW+xOTtlBQdUyM9AjIckNBcBDcNqX/f2W+PqT8fiT8viT8viT
8viT8viT8viQ8viM8PmF8PmA7/l37vlv7Ppm6vpe6fpU5/pM5fpC5Po44/ow4fon3voe3foX2/oR
2voK2PoA1/5Y2PHk7vDz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py8vL9/f2urq4gIK6u
rv39/fLy8vPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Xq6vi1ufSJkP2MlPiIke+Died8gd92edZucc5nZsVeW7lTSrNGM6g/K5FP
aHdu2Wty9mhn5Vxc4k5O2z4+1C8wzhoWxgkEv1qW4qD//5X1+ZPx+JPy+JPy+JPy+JPy+JLx+Izx
+Ybw+YDv+Xju+XDs+mfq+l7p+lXo+kzm+kPk+jnj+jDi+iff+h/d+hfb+hHa+gDZ/iTZ+Nfp7fPz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8v39/a6uriAgrq6u/f398vLy8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz+NHT6Z+l+Y6Y+4WN94OI7Ht943Bz22dp0mFewVlSp1JcjWWle33yeX/6e3rtcnLrZ2fm
WFjgRkbYNjbRJSbKDArADBTAY6fml/38lPT5k/H4k/L4k/L4k/L4kfH5jPH5hvD5gO/5eO75cOz6
Z+r6Xun6Vej6TOb6Q+T6OeP6MOL6J9/6H936F9v6A9r8Itn4x+ju8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy/f39rq6uICCurq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pw8fDNzc2/wL/Dw8PNzc3s7Ozd3d29vb3U0dHi3t7h39+o
nJmZdXWsdXi/iIq1f32YZ1+Wc3CJcJqCfu95gPx8f/Z+fe5+fu96eu9vb+lgYORNTdw7O9MpKcwY
GMUAALyChdrC6u6S+fqT8vmT8viT8viS8viP8viK8PmE8Pl+7/l27vpv7Ppm6vpd6fpT6PpK5vpB
5Po44/ov4fom3/oe3foR2/sx3PfJ5+3z8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Py8vL9/f2urq4gIK6urv39/fLy8vPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz83+3gSt8LjB8MzKANGZ9ZoeTiD6IQD58QTJ7OGp7amaOaj+LRzuDQXiHeKqvqFOP
UzF/NWGKYaSmsYCA5IWG/H197X19731973x873Jy62Ji5FBQ3D090ysrzA4OwT49z+Pi8PLz88Tn
6pfx95P0+ZPy+JDy+Izx+Ijw+YLv+Xzv+XTu+m3s+mTq+lvp+lLn+kjl+kHk+jfi+izg+iXf+hzd
+jrf+s7r8fPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8v39/a6u
riAgrq6u/f398vLy8/Pz8/Pz8/Pzv7a2opeXwcDA3tnZrJmZurm58/Pz0MbGkn5+j36A2dnYb6Ry
HpMhaYJrSYhLKoguYoNjQI9DV4JYJo4qTnZQgpaCbZdvLIkwZ41pSIVLIoQmVnxZRH9FhI+Drq3A
hITxgoH0fn7ufX3vfHzvcnLrYmLkT0/cOzvTJCLKHR3GyMjt8/Pz8/Pz8/Pz1u7xqPL3k/D3jPP6
iPH5hPD5f+/5eu75cuz6auz6Yur6Wej6UOf6R+X6POT6MeL6KOD6M+D5ceb32PD08/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy/f39rq6uICCurq79/f3y8vLz
8/Pz8/Pz8/OYMjKCDw99aWmUgICNERF1WVnW1NSSTU2CNzeDKSp8UVR+loAnlC5BfUM2hzk6gT2n
q6eAoIFDdEUbex9KeUt7kXwYhh43bzmBjoJpjmoiiSU+bUAagB9gg1zz8/PMzeyVlPmBgO5+fu94
ee1tbehcXOFJSdk6OtJNTdKysubz8/Pz8/Pz8/Pz8/Pz8/Pt8vPR7fCt6O2K8fqA7/l57vl17vps
7fpg6/pa6fpT6PpI5/pD5fo74/pO5PmL6fe+7vXz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py8vL9/f2urq4gIK6urv39/fLy8vPz8/Pz8/Pz85IwMIUP
D3UtLXNLS5AQEHQjI6ynp7ekpK2lpZRoZ4QPFpqdli6WNzN4NUd9SSeAKYqRipm0mmeqal+rYqy+
rMfRx3K3dGSmZZWxldjd2Yu/jWGkZHKydc/VzvPz8/Pz8+fn9MLC8KSl746Q64GB535/5IaG4bKy
6N3d7/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8+7x8tXx9L/t86Tu9o/u+Int+Izr+ITq+H7q+Irp
95Dq97bt9dXw9PDz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Ly8v39/a6uriAgrq6u/f398vLy8/Pz8/Pz8/PzijQ0aRcXdiAgfB0dczAweRYW
g25ul4CAeSwsdCkoiVhb3t/eT6NUJoIqMIE0RJtGwcXB6e3p4e3h5+7n8/Pz8/Pz7PDs3+zf6+7r
8/Pz8fLx4Ozg7fDt8/Pz8/Pz8/Pz8/Pz8/Pz8PDz6Ojy5eXx5+fx7u7y8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz7/Pz6PLz5/L06PL05/L05/Lz7fLz8fPz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy
/f39rq6uICCurq79/f3y8vLz8/Pz8/Pz8/OGJydgHh6DYWGNEBB3VFSEVlZuJiZ1VlZ7Dg5rLCx0
VFS6ubjV3tXB3sLA3sHb5tvz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py8vL9/f2urq40LK6urv39
/fLy8vPz8/Pz8/Pz851OTohTU8O7u59AQJ6Fhbmrq5VAQJ2Hh5FBQZA0NI4/P7avr/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8v39/a6urjEyrq6u/f398vLy8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8vLy/f39rq6uYm+urq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Py8vL9/f2urq5vbK6urv39/fLy8vPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8v39/a6uriAg
rq6u/f398vLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy/f39rq6uOkSurq79/f3x8fHy8vLy
8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy
8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy
8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy
8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy
8vLy8vLy8vLy8vLy8vLy8vLy8vLx8fH9/f2urq5tL7Gxsf////7+/v7+/v7+/v7+/v7+/v7+/v7+
/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+
/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+
/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+
/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+
/v7+/v7+/v7+/v///7GxsTc6mJiYsbGxr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+v
r6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+v
r6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+v
r6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+v
r6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vsbGx
mJiYIj4AAA==
);}
