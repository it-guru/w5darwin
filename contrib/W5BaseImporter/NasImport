#!/usr/bin/env perl
package MyWin;
#  W5Base Framework
#  Copyright (C) 2008  Holm Basedow (info@blauwarme.de)
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#  $Revision: 3155 $  Subversion Revision Number
use strict;
use vars qw(@ISA);
use Data::Dumper;
@ISA=qw(Win32::GUI::Window);

sub new
{
   my $type=shift;
   my %param=@_;
   my $hostname=$param{-hostname};
   my $file=$param{ARGV}->[0];
   my $o=$param{o};
   my $force=$param{-force};
   my $nowarn=$param{-nowarn};
   my $mode=$param{-mode};
   my $params=$param{-params};
   my $version=$param{-version};
   my $fullstoredfilename=$param{-fullstoredfilename};
   my $icon = eval("newIcon Win32::GUI::BitmapInline(main::WindowIcon());");
   $param{-icon}=$icon;
   $param{-left}=100;
   $param{-height}=500;
   $param{-width}=700;
   $param{-dialogui}=1;
   $param{-title}="test" if (!$param{-title});
   $param{-name}="Main";
   $param{-onResize}=\&doResize;
   $param{-onTerminate}=\&doTerminate;
   $param{-onMinimize}=\&doMinimize;
   $param{-minsize}=[700,400];
   eval("\$param{-menu}=Win32::GUI::MakeMenu(
                                     '&File' => 'File',
                                     ' > &Open'  => { -name=>'Open',-onClick=>\\&OpenFile},
                                     ' > &End'  => { -name=>'Exit',-onClick=>\\&doTerminate},
                                     '&?' => 'Info',
                                     ' > &Info'   => { -name=>'Info',-onClick=>\\&Info},
   );");
   my $self=$type->SUPER::new(%param);
   $self->SetIcon($icon);
   #$self->MessageBox('error','header');
   $self=bless($self,$type);
   $self->{file}=$file;
   $self->{fullstoredfilename}=$fullstoredfilename;
   $self->{PARAM}=$params;
   $self->{VERSION}=$version;
   $self->{o}=$o;
   $self->{ICON}=$icon;
   $self->AddNotifyIcon(-name => "systray",
                        -icon => $self->{ICON},
                        -tip  => "W5Base Importer",
   );
   $self->Center();
   $self->{GRID}=eval("apply Win32::GUI::GridLayout(\$self,
                       [qw(10 10 90 * 10 30 10 * * * 10 10)],
                       [qw(10 25 10 20 10 20 20 20 10 10 20 10 * 10 40 10 20 10)],0,0);");
   $self->{FONT}=eval("new Win32::GUI::Font(-bold   => 1,
                                            -size   => 12,
   )");
   $self->{FONT2}=eval("new Win32::GUI::Font(-bold   => 0,
                                             -size   => 12,
   )");
   $self->{BITMAP}=eval("new Win32::GUI::BitmapInline(main::WindowImg());");
   # header
   $self->AddLabel(
          -name        => "headname",
          -text        => "W5Base NAS IMPORTER",
          -font        => $self->{FONT},
          -foreground  => 0x000000,
   );
   $self->{GRID}->add($self->headname,[3..12],2,"left justify");
   $self->AddLabel(
          -name        => "headname",
          -text        => $self->{VERSION},
          -font        => $self->{FONT2},
          -foreground  => 0x000000,
   );
   $self->{GRID}->add($self->headname,[1..10],2,"right justify");
   $self->AddLabel(
          -name         => "pic",
          -bitmap       => $self->{BITMAP},
          -size   => [200,200],
   );
   $self->{GRID}->add($self->pic,10,6,"right top");
   $self->AddGroupbox( 
           -name => "header", 
           -size => [100,100],
   );
   $self->{GRID}->add($self->header, [2..11], [1..2], "justify justify");
   # select fileformat 
   $self->AddRadioButton(
           -name     => "auto",
           -text     => "Auto",
           -tabstop     => 1,
   );
   $self->{GRID}->add($self->auto,3,6,"justify justify");
   $self->AddRadioButton(
           -name     => "emc",
           -text     => "Emc",
           -tabstop     => 1,
   );
   $self->{GRID}->add($self->emc,3,7,"justify justify");
   $self->AddRadioButton(
           -name     => "netapp",
           -text     => "NetApp",
           -tabstop  => 1,
   );
   $self->{GRID}->add($self->netapp,3,8,"justify justify");
   # input data 
   $self->AddLabel(
          -name   => "hostlabel",
          -text   => "Hostname",
   );
   $self->{GRID}->add($self->hostlabel,4,5,"justify buttom");
   $self->AddTextfield(
           -name      => "hostname",
           -text      => $hostname,
           -width     => 130,
           -height    => 20,
           -tabstop     => 1,
   );
   $self->{GRID}->add($self->hostname, 4, 6, "justify top");
   $self->AddCheckbox(
           -name     => "writedata",
           -text     => "write Data",
           -tabstop     => 1,
   );
   $self->{GRID}->add($self->writedata,4,7,"justify justify");
   $self->AddCheckbox(
           -name     => "warnings",
           -text     => "Warnings on",
           -checked  => 1,
           -tabstop     => 1,
   );
   $self->{GRID}->add($self->warnings,4,8,"justify justify");
   $self->AddGroupbox( 
           -name => "inputdata", 
           -text => "input",
           -size => [100,100],
   );
   $self->{GRID}->add($self->inputdata, [2..5], [4..10], "justify top");
   # login data
   $self->AddLabel(
          -name   => "webuserl",
          -text   => "Webuser",
   );
   $self->{GRID}->add($self->webuserl,8,5,"justify buttom");
   $self->AddTextfield(
          -name      => "webuser",
          -text      => ${$self->{PARAM}->{'webuser=s'}},
          -width     => 130,
          -height    => 20,
          -tabstop=> 1,
   );
   $self->{GRID}->add($self->webuser, 8, 6, "justify top");
   $self->AddLabel(
          -name   => "webpassl",
          -text   => "Webpassword",
   );
   $self->{GRID}->add($self->webpassl,9,5,"justify buttom");
   $self->AddTextfield(
          -name      => "webpass",
          -text      => ${$self->{PARAM}->{'webpass=s'}},
          -width     => 130,
          -height    => 20,
          -password  => 1,
          -tabstop=> 1,
   );
   $self->{GRID}->add($self->webpass, 9, 6, "justify top");
   $self->AddLabel(
          -name   => "baseurl",
          -text   => "BaseURL",
   );
   $self->{GRID}->add($self->baseurl,8,7,"justify buttom");
   $self->AddTextfield(
          -name      => "base",
          -text      => ${$self->{PARAM}->{'base=s'}},
          -width     => 130,
          -height    => 20,
          -tabstop=> 1,
   );
   $self->{GRID}->add($self->base, [8..9], 8, "justify top");
   $self->AddGroupbox( 
          -name => "connectdata", 
          -text => "connect data",
          -size => [100,100],
   );
   $self->{GRID}->add($self->connectdata, [7..11], [4..10], "justify top");
   # info row
   $self->AddLabel(
          -name   => "filename",
          -text   => "FILE: ".$self->{file},
   );
   $self->{GRID}->add($self->filename,[9..12],11,"justify justify");
   $self->AddLabel(
          -name   => "fileformat",
          -text   => "FILEFORMAT:",
   );
   $self->{GRID}->add($self->fileformat,[5..8],11,"justify justify");
   $self->AddLabel(
          -name   => "host",
          -text   => "HOSTNAME:",
   );
   $self->{GRID}->add($self->host,[2..3],11,"justify justify");
   # output textfield
   $self->AddTextfield(
           -name        => "output",
           -text        => "",
           -multiline   => 1,
           -readonly    => 1,
           -autohscroll => 1,
           -hscroll     => 1,
           -autovscroll => 1,
           -vscroll     => 1,
           -foreground  => 0x000000,
           -background  => 0xE6E6E6,
   );
   $self->{GRID}->add($self->output, [2..11], 13, "justify justify");
   # start button
   $self->AddButton(
           -name     => "run",
           -text     => "Start",
           -disabled  => 1,
           -onClick  => \&doStart, 
   );
   $self->{GRID}->add($self->run,[2..11],15,"justify justify");
   $self->AddProgressBar(
           -name     => "pgbar",
           -smooth   => 1,
   );
   $self->{GRID}->add($self->pgbar,[2..11],17,"justify justify");
   $self->{GRID}->recalc();
   $self->checkMode();
   $self->emc->SetCheck(1) if ($mode eq "emc");
   $self->netapp->SetCheck(1) if ($mode eq "netapp");
   $self->warnings->SetCheck(0) if ($nowarn);
   $self->auto->SetCheck(1) if ($mode eq "auto");
   $self->writedata->SetCheck(1) if ($force);
   return($self); 
}

sub OpenFile
{
   my $self=shift;
   my $file;
   eval('$file = Win32::GUI::GetOpenFileName();');
   if ($file){
      $self->{file}=$file;
      $self->checkMode();
   }
}

sub doStart
{
   my $self=shift;
   my @oplist; 
   $self->{sharedata}={}; 
   my $mainwin=$self->GetParent();
   $mainwin->output->Change(-text => "");
   $mainwin->output->DoEvents();
   $mainwin->output->LimitText(1000000);
   $mainwin->output->SetFocus();
   $mainwin->output->Append("login ... ");
   my ($exitcode, $msgs);
   my @result=$mainwin->checkMode();
   if ($result[0] != 0){
      return(1,$result[1]);
   }
   # connect API
   $mainwin->pgbar->StepIt();
   $mainwin->pgbar->SetRange(0,1500);
   $mainwin->pgbar->SetStep(1);
   $mainwin->pgbar->SetPos(50);
   my $Config=main::createConfig(${$mainwin->{PARAM}->{'base=s'}},
                                 ${$mainwin->{PARAM}->{'webuser=s'}},
                                 ${$mainwin->{PARAM}->{'webpass=s'}},
                                 0,0,\$exitcode,\$msgs);
   $mainwin->run->Enable(0);
   if (!$Config){
      eval("Win32::MsgBox(\"login error: \$msgs\",Win32::MB_ICONQUESTION|0, 'Error!')");   
      $mainwin->run->Enable(1);
      return(1,$msgs);
   }else{
      main::XSaveStoreFile($mainwin->{fullstoredfilename},$mainwin->{PARAM});
   }
   $mainwin->output->Append("done\r\nget objects ... ");
   @result=main::moduleObj($Config);
   if ($result[0] != 0){
      eval("Win32::MsgBox(\"\$result[1]\",Win32::MB_ICONQUESTION|0, 'Error!')");   
      $mainwin->run->Enable(1);
      return(1,$result[1]);
   }

   # read File
   $mainwin->output->Append("done\r\nreading file ... ");
   @result=main::readFile($mainwin->{FH},
                          $self->{sharedata},
                          $mainwin->{curmode},
                          $mainwin->hostname->GetLine(0),\&StepIt,$mainwin);
   if ($result[0] != 0){
      eval("Win32::MsgBox(\"\$result[1]\",Win32::MB_ICONQUESTION|0, 'Error!')");   
      $mainwin->run->Enable(1);
      return(1,$result[1]);
   }

   # compute operation
   $mainwin->output->Append("done\r\ncompute operations ... and preview operations...\r\n");
   @result=main::calculateOperations($mainwin->{o},$self->{sharedata},
                                     \@oplist,$mainwin->hostname->GetLine(0),\&StepIt,$mainwin);
   if ($result[0] != 0){
      eval("Win32::MsgBox(\"\$result[1]\",Win32::MB_ICONQUESTION|0, 'Error!')");   
      $mainwin->run->Enable(1);
      return(1,$result[1]);
   }
 
   # write data to API
   if ($mainwin->writedata->GetCheck() == 1){
      $mainwin->output->Append("write data ... ");
      @result=main::processOperations($mainwin->{o},\@oplist,\&StepIt,$mainwin);
      if ($result[0] != 0){
         eval("Win32::MsgBox(\"\$result[1]\",Win32::MB_ICONQUESTION|0, 'Error!')");   
         $mainwin->run->Enable(1);
         return(1,$result[1]);
      }
      $mainwin->output->Append("done\r\n");
   }
   $mainwin->output->Append("\r\nready!");
   $mainwin->run->Enable(1);
   $mainwin->pgbar->SetPos(1500);
}

sub StepIt
{
   my $self=shift;
   my $text=shift;
   $self->pgbar->StepIt();;
   if ($self->warnings->GetCheck() == 0 and substr($text,0,4) eq "WARN"){
      return(0); 
   } 
   $text="      ".$text if (substr($text,0,9) eq "insert ip");
   $self->output->Append($text."\r\n") if ($text);
   $self->DoEvents();
}

sub checkMode
{
   my $self=shift;
   my $file=$self->{file};
   my @mode;
   # check filemode
   $self->{curmode}="emc" if ($self->emc->GetCheck() == 1);
   $self->{curmode}="netapp" if ($self->netapp->GetCheck() == 1);
   if (open(FILE,"<$file")){
      $self->run->Enable(1);
      if ($self->auto->GetCheck() == 1){
         @mode=main::detectMode(\*FILE) if ($self->auto->GetCheck() == 1);
         if ($mode[0] == 0){
            $self->{curmode}=$mode[1];
         }else{
            $self->{curmode}="unknown";
         }
      }
      $self->{FH}=\*FILE;
   }
   # limit filename length
   if (length($file) > 45){
      $file=substr($file,0,5)."...".substr($file,length($file)-36,length($file));
   }
   # save login datas
   ${$self->{PARAM}->{'base=s'}}=$self->base->GetLine(0);
   ${$self->{PARAM}->{'webuser=s'}}=$self->webuser->GetLine(0);
   ${$self->{PARAM}->{'webpass=s'}}=$self->webpass->GetLine(0);
   # output file datas
   $self->filename->Change(-text=>"FILE: ".$file);
   $self->fileformat->Change(-text=>"FILEFORMAT: ".$self->{curmode});
   $self->host->Change(-text=>"HOSTNAME: ".$self->hostname->GetLine(0));
   if ($mode[0] != 0){
      eval("Win32::MsgBox(\"\$mode[1]\",Win32::MB_ICONEXCLAMATION|0, 'Error!')"); 
      return(1,$mode[1]);
   }
   return(0);
}

sub Info
{
   my $self=shift; 
   my $version=$self->{VERSION};
   my $text=(<<EOF);
$version

W5Base Importer is a tiny software to import data
in a W5Base Environment of your own choice

W5Base Framework
Copyright (C) 2008  Holm Basedow (info\@blauwaerme.de)

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
EOF

   $self->MessageBox("$text",'Infomation',0x0020);
}

sub doTerminate
{
   return(-1);
}

sub doResize
{
   my $self=shift;
   $self->{GRID}->recalc();
}

sub doMinimize {
    return(1);
}

################################################################################
package main;
use strict;                   
use lib qw(/opt/w5base/lib);
use W5Base::API;
use Data::Dumper;
use Net::DNS;
use Fcntl qw(SEEK_SET);
use vars qw($GUI $Window);


my $netdns=new Net::DNS::Resolver();
my $DefaultBase="https://w5base.net/w5base/auth/";
my ($help,$verbose,$loginuser,$loginpass,$quiet,$base,$lang);
my ($mode,$force,$hostname,$type,$gui,$nowarn,%o,$Revision,$empty);
my $count=0;
my $version="Version 0.2 build$Revision: 3155 $empty ";
my %P=("help"=>\$help,"base=s"=>\$base,"lang=s"=>\$lang,
       "webuser=s"=>\$loginuser,"webpass=s"=> \$loginpass,
       "verbose+"=>\$verbose,"nowarn"=>\$nowarn,
       "force"=>\$force,"hostname=s"=>\$hostname,
       "mode=s"=>\$mode,"type=s"=>\$type,"gui"=>\$gui);

# set options
$|=1;
XGetOptions(\%P,\&Help,undef,undef,".nasimport",noautologin=>1);

# set defaults
$mode="auto" if (!defined($mode));
$type="nfs" if (!defined($type));
if ($gui){
   $|=1;
   my $fullstoredfilename=$ENV{HOMEDRIVE}.$ENV{HOMEPATH}."\\.nasimport";
   XLoadStoreFile($fullstoredfilename,\%P);
   eval('
         use Win32::GUI;
         use Win32::GUI::GridLayout;
         use Win32::GUI::BitmapInline;
         use Win32::GUI::DIBitmap;
         $GUI=new MyWin(-title=>"W5Base Importer", 
                        -hostname=>$hostname,
                        ARGV=>\@ARGV,
                        o=>\%o,
                        -mode=>$mode,
                        -version=>$version,
                        -nowarn=>$nowarn,
                        -fullstoredfilename=>$fullstoredfilename,
                        -params=>\%P,
                        -force=>$force);
         $GUI->Show();
         Win32::GUI::Dialog();');
   msg(ERROR,"--gui only on windows systems \n $@") if ($@);
}else{
   # create connection config
   my $apidebug=$verbose>=3 ? 1 : 0;
   my $Config=createConfig($base,$loginuser,$loginpass,$lang,$apidebug);
   
   my @result=moduleObj($Config);
   if ($result[0] != 0){
      msg(ERROR,$result[1]);
      exit(1);  
   }
   
   my @hostname=split(/,/,$hostname);
   if ($#hostname == -1){
      msg(ERROR,"no hostname specified!");
      exit(1);
   }
   
   if ($#ARGV == -1){
      msg(ERROR,"no share specified!");
      exit(1);
   }
    
   if ($#ARGV != $#hostname){
      msg(ERROR,"number of hostnames and shares must be the same!");
      exit(1);
   }
   foreach my $file (@ARGV){
      if (open(FILE,"<$file")){ 
         my @curmode=(0,$mode);
         if ($mode eq "auto"){
            @curmode=detectMode(\*FILE);
            if ($curmode[0] != 0){
               msg(ERROR,"mode=".$curmode[1]);
               exit(1);
            }
         }
         my %sharedata;
         my @result=readFile(\*FILE,\%sharedata,$curmode[1],$hostname[$count]);
         if ($result[0] != 0){
            msg(ERROR,$result[1]);
            exit(1);
         }
         my @oplist;
         @result=calculateOperations(\%o,\%sharedata,\@oplist,$hostname[$count]);
         if ($result[0] != 0){
            msg(ERROR,$result[1]);
            exit(1);
         }
         if ($force){
            @result=processOperations(\%o,\@oplist);
            if ($result[0] != 0){
               msg(ERROR,$result[1]);
               exit(1);
            }
         }
         close(FILE);
      }else{
         msg(ERROR,"File: $file doesn't exists");
         exit(1);
      }
      $count++;
   }
}

sub moduleObj
{
   my $Config=shift;
   # load ModuleObject
   my %loadobj=('sys'=>'itil::system',
                'nas'=>'itil::systemnfsnas',
                'ipnet'=>'itil::lnknfsnasipnet',
                'net'=>'itil::network');
   foreach my $localid (keys(%loadobj)){
      my $objectname=$loadobj{$localid};
      my $obj=getModuleObject($Config,$objectname);
      if (!defined($obj)){
         msg(ERROR,"$obj not defined");
      }
      $o{$localid}=$obj;
   }
   return(0);
}

sub detectMode
{
   my $fh=shift;
   my $mode;
   while(<$fh>){
      if ($_=~m/^export.*$/){
         $mode="emc";
         return(0,$mode);
      }elsif($_=~m/^.*sec=sys.*$/){
         $mode="netapp";
         return(0,$mode);
      }
   }
   return(1,"mode not exists");
}


sub readFile
{
   my $fh=shift;
   my $sharedata=shift;
   my $cm=shift;
   my $hostname=shift;
   my $stepit=shift;
   my $mywin=shift;
   seek($fh,SEEK_SET,0);
   $sharedata->{$hostname}->{'ignore'}=[];
   $|=1;
   msg(INFO,"read input file...") if (!$stepit);
   while(my $line=<$fh>){
      &{$stepit}($mywin) if ($stepit);
      $line=~s/\s*$//;
      $line=~s/#.*$//;
      next if ($line=~m/^\s*#.*$/);
      next if ($line=~m/^\s*$/);
      my ($path,$param,@param);
      if ($cm eq "netapp"){
         if (($path,$param)=$line=~m/^(\/.*)\s+(.*)\s*$/){
            $param=~s/^-//;
            @param=split(/,/,$param); 
         }else{
            push(@{$sharedata->{$hostname}->{'ignore'}},"line ignored: $line");
         }
      }elsif($cm eq "emc"){
         if (($path,$param)=$line=~m/^export\s+"([^"]+)"\s+(.*)\s*$/){
             @param=split(/\s+/,$param); 
         }else{
            push(@{$sharedata->{$hostname}->{'ignore'}},"line ignored: $line");
         }
      }else{
         if (!$stepit){
            msg(ERROR,"unknown mode");
            exit;
         }
      }
      foreach my $param (@param){
         if (my ($var,$ip)=$param=~m/^(\S+)=(.*)\s*$/){
            if (lc($var) ne "access" and lc($var) ne 
                         "rw" and lc($var) ne "root"){
               $sharedata->{$hostname}->{$path}->{'exportoptions'}="$ip=$var ";
               next;
            }
            foreach my $ip (split(/:/,$ip)){
               if ($ip!~m/^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+.*$/){
                  my $query;
                    
                  if ($query=$netdns->search($ip)){
                     foreach my $rr ($query->answer) {
                        next unless $rr->type eq "A";
                        $ip=$rr->address;
                     }
                  }else{
                     $sharedata->{$hostname}->{$path}->{'exportoptions'}=
                     $sharedata->{$hostname}->{$path}->{'exportoptions'}.
                     "$var=$ip ";
                     push(@{$sharedata->{$hostname}->{'ignore'}},
                     "unknown IP/HOST=$ip, entry will be a export option!");
                     next;
                  }
               }
               if ($ip!~m/^.*[\/].*$/ and 
                   $ip=~m/^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$/){
                  $ip="$ip/32";
               }
               $sharedata->{$hostname}->{$path}->{'ip'}->{$ip}->{$var}=1;
            }
         }else{
            push(@{$sharedata->{$hostname}->{'ignore'}},
            "param problem $param line=$line");
         }
      }
   }
   msg(INFO,"ready read input file!") if (!$stepit);
   return(0);
}


sub calculateOperations
{
   my $o=shift;    
   my $sharedata=shift;    
   my $oplist=shift;    
   my $hostname=shift;    
   my $stepit=shift;
   my $mywin=shift;
   my ($networkid,$found);

   # get hostname
   $o->{'sys'}->SetFilter({name=>[$hostname]});
   my @hl=$o->{'sys'}->getHashList(qw(id));
   if ($#hl==-1){
      return(1,"hostname $hostname not exists!");      
   }
   if ($#hl>0){
      return(1,"hostname $hostname not unique!");      
   }
  
   # get network 
   $o->{'net'}->SetFilter({name=>['T-Systems Storage/NAS LAN']});
   my @netid=$o->{'net'}->getHashList(qw(id));
   if ($#netid==-1){
      $o->{'sys'}->LastMsg();
      return(1,"network T-Systems Storage/NAS LAN not exists!");      
   }
   if ($#netid>0){
      $o->{'sys'}->LastMsg();
      return(1,"network T-Systems Storage/NAS LAN not unique!");      
   }

   # get available shares
   my $destid=$hl[0]->{id};
   $o->{'nas'}->SetFilter({systemid=>$destid});
   my @ln=$o->{'nas'}->getHashList(qw(id systemnfsnasserver name cistatusid
                                      type exportoptions systemnfsnas system));
   $o->{'nas'}->dieOnERROR();
   # set needless shares on delete state
   foreach my $ln (@ln){
      my $found=0;
      foreach my $share (keys(%{$sharedata->{$hostname}})){
         if ($ln->{name} eq $share){
            $found=1;
         }
      } 
      if ($found == 0 and $ln->{cistatusid} ne 6){
         push(@$oplist,{OP           => 'update',
                         DATAOBJALIAS => 'nas',
                         IDENTIFYBY   => $ln->{id},
                         MSG          => "delete share ".$ln->{name},
                         DATA         => {cistatusid => 6}});
         if ($stepit){
            &{$stepit}($mywin,"delete share ".$ln->{name});
         }else{
            msg(INFO,"delete share ".$ln->{name});
         }
      }
   }

   foreach my $share (keys(%{$sharedata->{$hostname}})){
      my $mode="insert";

      if ($share eq "ignore"){
         foreach my $ig (@{$sharedata->{$hostname}->{'ignore'}}){
            push(@$oplist,{OP  => 'ignore',
                           MSG => $ig});
            if ($stepit){
               &{$stepit}($mywin,"WARN: $ig");
            }else{
               msg(WARN,"$ig") if (!$nowarn);
            }
         }
         $mode="ignore";
      }
      my $ref;
      foreach my $ln (@ln){
         if ($ln->{name} eq $share){
            $mode="update";
            if ($ln->{cistatusid} != 4 or $ln->{type} ne $type){
               push(@$oplist,{OP           => 'update',
                              DATAOBJALIAS => 'nas',
                              IDENTIFYBY   => $ln->{id},
                              MSG          => "update $share on $hostname",
                              DATA         => {
                                type          => $type,
                                cistatusid    => 4,
                                hostname      => $hostname,
                                name          => $share}});
                  if ($stepit){
                     &{$stepit}($mywin,"update $share on $hostname");
                  }else{
                     msg(INFO,"update $share on $hostname");
                  }
            }
            # get available ip's
            $o->{'ipnet'}->SetFilter({systemnfsnasid=>$ln->{id}});
            my @ni=$o->{'ipnet'}->getHashList(qw(id exportoptions 
                                              networkid systemnfsnasid name));
            $o->{'ipnet'}->dieOnERROR();
            # delete ip's on a existing share
            foreach my $ni (@ni){
               $found=0;
               foreach my $ip (keys(%{$sharedata->{$hostname}->
                                      {$share}->{ip}})){
                  if ($ni->{name} eq $ip){ 
                     $found=1;
                  } 
               }
               if ($found == 0){
                  push(@$oplist,{OP           => 'delete',
                                 DATAOBJALIAS => 'ipnet',
                                 IDENTIFYBY   => $ni->{id},
                                 MSG          => "delete ip with id=$found",
                                 DATA         => {}});
                  if ($stepit){
                     &{$stepit}($mywin,"delete ip with id=$found");
                  }else{
                     msg(INFO,"delete ip with id=$found");
                  }
               }
            }
            # update or insert ip's on a existing share
            foreach my $ip (keys(%{$sharedata->{$hostname}->{$share}->{ip}})){
               $found=0;
               my $options;
               foreach my $ni (@ni){
                  my @r;
                  foreach my $rights (keys(%{$sharedata->{$hostname}->
                                              {$share}->{ip}->{$ip}})){
                        if ($sharedata->{$hostname}->{$share}->
                                         {ip}->{$ip}->{$rights} == 1){
                           push(@r,$rights);     
                        }
                  }
                  $options=join(",",@r);
                  if ($ni->{name} eq $ip and ($ni->{networkid} ne $netid[0]->{id} or
                     $ni->{exportoptions} ne $options or 
                     $ni->{systemnfsnasid} ne $ln->{id})){
                      $found=$ni->{id};
                  }elsif($ni->{name} eq $ip){
                      $found=2;
                  }
               }
               if ($found == 0){
                  push(@$oplist,{OP           => 'insert',
                                 DATAOBJALIAS => 'ipnet',
                                 IDENTIFYBY   => undef,
                                 MSG          => "insert ip $ip",
                                 DATA         => {
                                   systemnfsnasid  => $ln->{id},
                                   exportoptions   => $options,
                                   name            => $ip,
                                   networkid       => $netid[0]->{id}}});
                  if ($stepit){
                     &{$stepit}($mywin,"insert ip $ip");
                  }else{
                     msg(INFO,"insert ip $ip");
                  }
               }elsif($found != 2){
                  push(@$oplist,{OP           => 'update',
                                 DATAOBJALIAS => 'ipnet',
                                 IDENTIFYBY   => $found,
                                 MSG          => "update ip $ip",
                                 DATA         => {
                                   systemnfsnasid  => $ln->{id},
                                   exportoptions   => $options,
                                   name            => $ip,
                                   networkid       => $netid[0]->{id}}});
                  if ($stepit){
                     &{$stepit}($mywin,"update ip $ip");
                  }else{
                     msg(INFO,"update ip $ip");
                  }
               }
            }
         }
      }
      # insert a new share
      if ($mode eq "insert"){
         my $newshare={OP           => 'insert',
                       DATAOBJALIAS => 'nas',
                       IDENTIFYBY   => undef,
                       MSG          => "insert $share on $hostname", 
                       DATA         => {
                         type          => $type,
                         cistatusid    => 4,
                         system        => $hostname,
                         name          => $share,
                         exportoptions => $sharedata->{$hostname}->{$share}->
                                          {'exportoptions'}}};
            if ($stepit){
               &{$stepit}($mywin,"insert $share on $hostname");
            }else{
               msg(INFO,"insert $share on $hostname");
            }
         push(@$oplist,$newshare);

         # insert a new ip on a new share
         my $options;
         foreach my $ip (keys(%{$sharedata->{$hostname}->{$share}->{ip}})){
            my @r;
            foreach my $rights (keys(%{$sharedata->{$hostname}->
                                       {$share}->{ip}->{$ip}})){
               if ($sharedata->{$hostname}->{$share}->{ip}->
                   {$ip}->{$rights} == 1){
                  push(@r,$rights);     
               }
            }
            $options=join(",",@r);
            push(@$oplist,{OP           => 'insert',
                           DATAOBJALIAS => 'ipnet',
                           IDENTIFYBY   => undef,
                           MSG          => "insert ip $ip on $hostname", 
                           DATA         => {
                             name            => $ip,
                             networkid       => $netid[0]->{id},
                             exportoptions   => $options,
                             systemnfsnasid  => \$newshare->{IDENTIFYBY}}});
            if ($stepit){
               &{$stepit}($mywin,"insert ip $ip on $hostname");
            }else{
               msg(INFO,"insert ip $ip on $hostname");
            }
         }
      }
   }
   return(0);
}


sub processOperations
{
   my $o=shift;    
   my $oplist=shift;    
   my $stepit=shift;
   my $mywin=shift;
   my ($id,$found);
   foreach my $record (@$oplist){
      &{$stepit}($mywin) if ($stepit);
      # check for valid objects only
      foreach my $objname (keys(%{$record})){
         $found=0;
         foreach my $orgobjname (qw(DATAOBJALIAS OP MSG DATA IDENTIFYBY)){
            $found=1 if ($objname eq $orgobjname);
         }
         if ($found == 0){
            return(1,"Objectname=$objname not allowed");
         }
      }
      foreach my $data (keys(%{$record->{'DATA'}})){
         if (ref($record->{'DATA'}->{$data}) eq "SCALAR"){ 
            $record->{'DATA'}->{$data}=${$record->{'DATA'}->{$data}};
         }
      }
      if ($record->{OP} eq "insert"){
         $id=$o->{$record->{'DATAOBJALIAS'}}->storeRecord($record->{'DATA'});
         $record->{'IDENTIFYBY'}=$id;
      }elsif($record->{OP} eq "update"){
         $id=$o->{$record->{'DATAOBJALIAS'}}->storeRecord($record->{'DATA'},
                                                          $record->{'IDENTIFYBY'});
      }elsif($record->{OP} eq "delete"){
         $id=$o->{$record->{'DATAOBJALIAS'}}->deleteRecord($record->{'IDENTIFYBY'});
      }else{
         if ($record->{OP} ne "ignore"){
            return(1,"unvalid mode ".$record->{OP});
         }
      }
   }
}

# help menu
sub Help
{
   print(<<EOF);
$RealScript [options] File File ...

   --verbose  display more details of operation process
   --quiet    only errors would be displayed
   --base     base url of filemgmt [default:$DefaultBase]
   --webuser  username
   --webpass  password
   --store    stores the parameters (not help,verbose and store)
   --help     show this help
              
   --mode     emc, netapp, auto [default:auto]
   --hostname more than one seperate by comma
   --type     export type (nfs, cifs ...) [default:nfs]
   --force    write data  
   --gui      grafical user interface
   --nowarn   prevent warnings
EOF
}
exit(255);

#####################################################################################
sub WindowIcon{
q(
AAABAAEAEBAAAAEAIADUAgAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAWwAA
AAAAAAAAAAAALfT+AC30/wA/9f8AQPX/AEb1/wBG9v8ASfX/AFT2/wBW9v8AV/b/AGFg7wBq9/4A
avf/AGv3/wBtbfEAdvj/AHf4/wB5ePIAgPj+AID4/wCB+P8Agfn/AImI9ACJifQAlJT1AJf5/gCX
+f8Al/r/AJiZ9QCY+v4AmPr/AJn5/wCa+f8Ao4tjAKSKYgClpPYAqZNsAK36/wCt+/8Arpp2ALCw
9wCznnwAtLT4ALaiggC3ufgAvaqMAL29+AC98P4Avs36AL7u6wDAr5EAwL/5AMHt6gDB+/8Awfz/
AML8/gDDspcAxracAMa3nADHxvkAx+r8AMm7ogDMvqcAzs76AM79/wDPwq0A0PDsANLGsgDT2swA
1NT7ANT9/wDVyrcA1f3/ANbPvQDW1fIA2M28ANrb+wDe1ccA39fJAODYygDh2csA5t/UAOfn/ADo
4dcA6ePZAOrl2wDr/v8A7e39AO7r4gD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAB8JBREAAAAAAAAAKCIjACEMCAMBBwAAAAAAOygiIzUaFg0IBAIQAAAATzouKiUy
Jh8UDggDBgAAAFBEPjMsQzgmHBMMCAoAAABWTkg/OUVHNicbFQ0eAAAAAFVRTEJKV0k3JxwgAAAA
AAAAWVRSSy0xPTBBAAAAAAAAAAAAAEYpGRILAAAAAAAAAAAAAABNNCQXDwAAAAAAAAAAAAAAWEAr
HRgAAAAAAAAAAAAAAABTPC8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//
AAD//wAA/w8AAOIHAADAAwAAgAMAAIADAACAAwAAwAcAAOAPAAD8HwAA/B8AAPwfAAD+PwAA//8A
AP//AAA=
);
} 

sub WindowImg{
q(
Qk14NwAAAAAAADYAAAAoAAAAWgAAADQAAAABABgAAAAAAEI3AAASCwAAEgsAAAAAAAAAAAAAmJiY
sbGxr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+v
r6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+v
r6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vrq6u
rq6urq6urq6ura2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2trq6urq6u
r6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vsbGxmJiYICCxsbH////+/v7+/v7+/v7+
/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+
/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+
/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v79/f3+/v7+/v79/f39/f38/Pz7+/v7+/v6+vr5+fn6
+vr5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn6+vr6+vr8/Pz9/f39/f3+/v7+/v7+
/v7+/v7+/v7+/v7+/v7+/v7+/v7///+xsbEgIK6urv39/fHx8fLy8vLy8vLy8vLy8vLy8vLy8vLy
8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy
8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy
8vLy8vLy8vHx8fDw8O/v7+/v7+3t7erq6unp6ejo6Ofn5+Xl5eTk5OPj4+Li4uPj4+Li4uLi4uLi
4uLi4uHh4eHh4eHh4eLi4uLi4uPj4+Xl5eXl5ejo6Onp6erq6uzs7O7u7u/v7/Hx8fLy8vLy8vLy
8vLy8vHx8f39/a6uriAgrq6u/f398vLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy8vLy8PDw7u7u
6urq6Ojo5OTk4ODg3d3d2tra19fX1dXV1NTU0tLS0dHR0dHR0dHR0NDQ0NDQz8/Pz8/Pz8/Pz8/P
0NDQ0dHR0tLS1dXV1tbW2dnZ3d3d4ODg5OTk6Ojo6enp7e3t8PDw8vLy8fHx8vLy8vLy/f39rq6u
CiCurq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py8vLv7+/t7e3p6enj4+Pc3NzV1dXPz8/J
ycnFxcXAwMC+vr69vb27u7u5ubm4uLi4uLi3t7e3t7e2tra2tra2tra2tra2tra3t7e6urq+vr7A
wMDExMTJycnQ0NDV1dXb29vh4eHn5+fr6+vu7u7w8PDy8vLy8vL9/f2urq4gIK6urv39/fLy8vPz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Hx8e3t7efn5+Dg4NbW1svLy8DAwLe3t66urqioqKOjo6CgoJ2d
nZubm5iYmJiYmJiYmJeXl5eXl5eXl5aWlpaWlpeXl5eXl5iYmJqamp+fn6Ojo6mpqa+vr7m5ucHB
wcrKytXV1d7e3uXl5evr6+/v7/Hx8fLy8v39/a6uriAgrq6u/f398vLy8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8vLy8PDw6urq4uLi1tbWyMjIuLi4qampm5ubj4+Ph4eHg4ODf39/fX19enp6d3d3dnZ2dXV1
c3NzcXFxb29vcHBwcHBwcHBwcnJyc3NzdnZ2fHx8g4ODiYmJlJSUn5+frKysubm5x8fH1dXV4eHh
6Ojo7e3t8PDw8vLy/f39rq6uICCurq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py8vLu7u7n5+fb
29vNzc27u7ulpaWTk5OEhIR3d3dqampfZGRWYmROXmJMXWFJW11LW11PWlxTVlZVVVVVVVVSUlJR
UVFRUVFTU1NVVVVZWVleXl5mZmZvb295eXmIiIiYmJipqam7u7vLy8va2trl5eXr6+vw8PDy8vL9
/f2urq4gIK6urv39/fLy8vPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8uzs7OTk5NjY2MXFxbGxsaCgoIyM
jG1yc0pudDB4hCGMnxadtBGivBGiuxGivBGiuxeYrx+HmCxteTlSV0JFRUZGRkRERENDQ0VFRUhI
SE9PT1dXV19fX2tra3x8fI6Ojp+fn7Ozs8bGxtfX1+Pj4+rq6vDw8PLy8v39/a6uriAgrq6u/f39
8vLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy7Ozs5OTk1dXVzMzMu7u7gZGTQoqXHaC5C7rYC7/gDLvb
DLXVDrPQDrPQDrLQDbPQDbbUDrrZDrrYEqjCHIabMF1lQ0lKSEZGRURESUlJT09PVVVVX19fampq
e3t7jIyMnp6es7OzxsbG19fX4+Pj6urq8PDw8vLy/f39rq6uICCurq79/f3y8vLz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Py8vLy8vLx8fHw8PDw8PDw8PDv7+/v7+/u7u7t7e3t7e3t7e3u7u7w8PDw8PDy
8vLy8vLz8/Py8vLs7Ozk5OTl5eXGyMhinacTu9gBzvUByfAAweQCutwCt9gEtdUGs9IJr84MrMkN
q8cNq8YNqcYNrMgNtNEOutkPs9EfjqI/XmRYV1dWVlVbW1tjY2NsbGx3d3eIiIiYmJioqKi7u7vM
zMzc3Nzm5ubr6+vw8PDy8vL9/f2urq4gIK6urv39/fLy8vPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8vDw8O/v7+zs7Onp
6eXl5eHh4d/f397e3t3d3dzc3Nvb29nZ2dfX19fX19fX19fX19zc3ODg4OXl5erq6u/v7/Dw8O3t
7fLy8s/S00WvwgLY/wDT+wDJ8ADG7ADF6wDF6gDD6ADC5gC/4gG73QS21wey0AuvzA2syg2syA2r
xg2rxw2xzg662BOsx0N2f3Rycnh2dXt7e4SFhY+Pj5ycnKurq7i4uMbGxtTU1ODg4Ojo6O3t7fHx
8fLy8v39/a6uriAgrq6u/f398vLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8fHx6+vr5eXl3d3d1dXVzc3NxcXFwMDAvLy8urq6
uLi4tra2tbW1srKyr6+vrq6urq6usbGxtra2vr6+ycnJ1dXV4uLi6urq8/Pzz9TVP73RAOD/ANP7
AM71AM/2AM/2AM30AMzzAMryAMrwAMfsAMTpAMDlAL3fBLjZCLPTC67LDazIDavIDavHDavIDbTS
E7XTToqVnp6eo6OjoqKiq6urtra2wMDAycnJ1dXV3d3d5eXl6+vr7+/v8fHx8vLy/f39rq6uICCu
rq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Px8fHp6enc3NzMzMy9vb2tra2jo6Obm5uWlpaQkJCNjY2KioqGhoaFhYWEhISC
goKBgYGBgYGEhISIiIiRkZGgoKCzs7PKysrv7+/a3N1Bw9QB5v8B1fsB1PoA1PoA1PoA1PoA1PkA
0/kA0vgA0fgAzvUAzPIAyO4AxusAwuYAvd8EttgJsc8NrMkNq8gNq8gNq8gNsc8Oudhjlp/JycnF
xcXExMTMzMzU1NTa2trg4ODn5+fr6+vu7u7w8PDy8vLy8vL9/f2urq4gIK6urv39/fLy8vPz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Hx8evr
69vb28HBwaWlpZGRkYSEhH19fXR0dG9vb2tra2xsbGtra2hoaGJiYl5eXl1dXV1dXV1dXV5eXmJi
YmhoaHV1dYqKiri4uNfY2Fa5xgTq/wTW/AbX+gbX+gbW+gbW+gXW+gTV+gPW+gLW+gLV+gHU+gDR
+ADP9gDN8wDJ7gDF6wDA5QK63Qe00wuuyw2syA2syA2rxw2xzxe41Y2prejo6N3d3d/f3+Pj4+fn
5+np6e3t7fDw8PLy8vLy8vLy8vLy8v39/a6uriAgrq6u/f398vLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8PDw5OTkyMjIpKSkhoaGb29v
X1hXVUZGUzs8TzI0UDI0UTk6T0BBU0xMUlNTU1NTTExMTExMTExMTU1NTU1NUFBQWlpac3Nzqamp
bqauCuz/Cdz9Ctj6C9j6C9j6C9j6C9j6Ctj6Cdf6CNb6B9j6Btb6Bdb6A9b6ANX6ANP5AM/3AMvz
AMjuAMPnAb7iBLbXC67MDazIDavIDanFDbbVJbTOxczN8vLy6+vr7e3t7u7u8PDw8vLy8/Pz8/Pz
8/Pz8/Pz8vLy/f39rq6uICCurq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pv7+/e3t6/v7+YmJhpXVxgNzVmJSJoHRxoHBxlGxxh
Gx1eGx1cHR9XISNTLzFQREZNUFBLTExLS0tLS0tKSkpLS0tUVFR2dnZ+j5Ih1OQO6P8Q2PoQ2voR
2foR2foR2/oR2voR2voP2voN2foM2foL2foJ1/oH1/oE1voC1voB1PoA0vkAzvUAyfAAxOsAv+ID
t9gKsM0NrMkNq8gNqsYOvNtXqbfs7e3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py8vL9/f2u
rq4gCq6urv39/fLy8vPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8+/v7+jo6MC/v3xbVX4rIIMmGn4kG3kiGXMfGW4cGWgbGWIZGlwaGlwZHV4a
Hl0gIlEzNFFPT1JTU1FRUVNTU1lZWWdlZoaDg1GgrBTw/xXa+hfc+hjc+hjc+hnd+hnc+hjc+hfc
+hXb+hTb+hLb+hHa+g7a+gzZ+gnY+gfX+gTW+gLW+gDT+gDP9gDL8QDF6gC/5AO42QqwzQysyA2s
xw2tyRK41aXGzPPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8v39/a6uriAgrq6u/f398vLy
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz39/ejWNdkS4fjS0ciCwchischCkbgScZfCQZdiAZcB4aZxsZXxkaWBgaWRgbXRodVi8xY2Bg
Z2hoaWlpdHR0ioqKkJmbLs7kGub/Htv6Ht76H976IN76IN76IN76IN76Ht76HN36G936Gdz6F9z6
Fdv6Etr6Dtr6DNj6CNf6Btf6A9X6ANT6AND3AMvyAMXsAL/kA7fXCq/MDavIDavICKrHXs7i8PLz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy/f39rq6uICCurq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pu7e2ZdG+dNyeSMiSP
MiSPMiWPMSKNMCGKLh+JLByFKRuAJhl2IBluGxlkGhlaGRtXGBteGh1hPT+OjY6ZmZmenp6/v7+B
pqwi6/8i3fsl3vom4Pon4Pop3/oo3/op4Poo4Pon4Pol3/oi3/oh3fof3voc3PoY2/oU3PoS2voO
2foK2PoH1/oC1voA1PoA0PgAy/IAxusAv+IEt9YMrcsNq8gLq8YgtM7K6e/z8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Py8vL9/f2urq4gIK6urv39/fLy8vPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz87uno5s5LJw6LZg5LZk5LZg5LJc5K5U3KZI0
J48xI4wvIIksHYQpGnsjGXEeGWYbGVsZG1cYG2AdH4Rxc9HR0c7Ozt/f3168ySjr/yre+i3h+i/h
+jDh+jLh+jLh+jLh+jHh+jDh+i7g+ivg+inf+ibf+iPf+iDd+hvd+hfb+hPb+g7Z+grY+gbX+gPW
+gHU+gDQ9wDL8QDF6gC+4Aez0w2tyQyrxwmrx6DZ4/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly
8v39/a6uriAgrq6u/f398vLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz6+Dfu2NanjwwokI3pEI4o0I4o0I3oUE1nz8znDwvmDgslDUokDIkiy4f
hysbfyUZch8ZZhoZWxkaWxkbajI1wr/A8/Pz1tnZQdjtMOX+M+L6NuP6OeL6OuL6O+T6POT6POT6
O+T6OuP6OOP6NeL6MuL6LuD6K+D6JuD6Id76Hd36Gd36FNv6D9n6C9j6B9b6BNX6ANT6AM/2AMrv
AMPoArvdCbHPDavIB6rIfczc8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy/f39rq6uICCurq79
/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/PXr6unQzqrRz6sSkGuSkOvSkOtSkKqSD+pRjykQzigPzScOy+XNyqRMiWNLiCIKxx+JRlxHRlk
GhlZGBpgHB+UgYLz8/O4xcc84vQ35P074/o+5PpA5PpC5PpE5fpE5PpE5fpD5fpC5PpA4/o94/o5
4/o14voy4vot4foo3/oj3voe3foZ3PoU2/oP2voK2foG1voC1foA0/kAzvUAx+4AwOQEt9YMrssL
qsdYxdjq8fLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py8vL9/f2urq4gIK6urv39/fLy8vPz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Lv78d9dq5LRbRQS7dT
TblUTrpUTrhUTbZRS7NPR69MQ6pIP6RDOJ49Mpg4LJIzJo0uIYYrHHwkGW8dGWEaGV8ZHWpAQsXD
w4mlqT/n9UDm/ETk+kfl+krm+kvn+k7m+k7n+k7n+k3n+kvm+knm+kbl+kLk+j7k+jrj+jXi+i/g
+ing+iTf+h/d+hnc+hTb+g/a+grZ+gXW+gLV+gDR+ADL8gDE6gG84Aiy0Q6rx0PA1t7u8PPz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8v39/a6uriAgrq6u/f398vLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz7uDfxGtmu1ZRwVtXxF5axV9bxF5bxF5awltX
vVhTuVVPtFBJrktDp0U7oD80mTktkjMmjC4ghiobeSIZahwZYRobWiEiYFVVUXp/Rej1Sej8Teb6
Uef6VOj6Vej6WOj6Wen6WOn6WOn6Vuj6U+j6UOf6S+b6R+b6QuT6PeT6NuL6MeL6KuD6JN/6Ht76
Gdz6E9v6Ddj6CNf6BNb6AdX6AND2AMjwAMHnA7jYC67MP7vS2+zv8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8vLy/f39rq6uICCurq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Po0tDGamfGX13LY2HOZmTPZ2bPZmbNZmXLY2HHYF3CXFm8V1K1Ukuu
S0KnRTufPzOYOCuRMiSJLR6BJhlxHhlnGxlcGx07Jy40Y2tM6fRR6fxV5/pY6fpb6fpd6fpg6vph
6vpg6fpg6vpe6vpb6fpY6PpS6PpO5/pJ5vpE5fo94/o34vow4foq4Poj3/od3foX3PoR2voL2PoG
1/oD1voB0vkAy/IAxOoAvN8IsdFCv9Xf7fDz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py8vL9/f2urq4g
IK6urv39/fLy8vPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8+jPz85vbtFoaNVrbNhucNlwcdlwcddvcNVsbNFpaMxkY8VfXL5ZVLdSTK5KQ6VDOp08MZU1
KYwvIYYqHHojGm0bEl0bGDgajzVo0lXr+Vjq+17p+mHp+mXq+mfr+mrr+mrr+mnr+mnr+mbr+mTq
+mHp+lzp+lfo+lLo+kvm+kTk+j3j+jfi+i/h+ijf+iHe+hvd+hTb+g7Z+gjX+gTW+gDU+gDP9gDH
7gDA5QS21kzC1+fv8fPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8v39/a6uriAgrq6u/f398vLy8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz69PT13Z32W9x
3HN233Z54Xh74Xh74Hd63XN22XBy1GtrzWZkxl9cvllTtVBKq0c/okE2mTotkDMlii4fgCcadB0R
YxsTMhStMl3+W+v8YOv6Zer6aer6bev6cO36cez6cuz6cuz6cez6buz6bOv6aOr6Y+n6Xur6WOj6
Uub6S+f6Q+X6POP6NOH6LeD6Jd/6H936GNv6Etn6DNj6B9f6AdX6ANH4AMvzAMTpALncb8na8PLy
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy/f39rq6uICCurq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pv3t7egoPhd3nlen/ofYLqf4TqfoTp
foPme3/ieHvccnTUbG3NZWTDXlu7VlCxTEWoRTydPTGUNSiMLyGFKhx8IhBmHB8bCKYUKONd3fhp
7/pt6/px7Pp17fl47vl67vl77vl77vl67vl37fl07fpx7Ppr6/pm6/pe6vpY6PpR6PpJ5vpB5fo6
4/oz4vop4Poi3vob2/oU2voO2foJ2PoE1voB1PoAzvUAxuwAveKW0d7z8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Py8vL9/f2urq4gIK6urv39/fLy8vPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Lt7eSRlOd7gOuAhu6DivGFi/CEi/CDiuyAh+h9geF3e9px
c9JqacliYL9aVbVRSqtIP6FANJc3K48xJIgrHYMlCloaOwkFuwAEy1C17nL4/HLs+nfu+nvu+X7v
+YHw+YLv+YHv+YDv+X3u+Xru+nft+nHt+mzs+mTq+l7q+lbo+k7n+kbl+j3j+jbi+i3h+ibg+h7d
+hbc+hDa+gvY+gbX+gHV+gDQ9wDI7wrB5rrd5fPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8v39
/a6uriAgrq6u/f398vLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz7ba37H+F8YWM84eO84eO84eO84eO8YSM7YKG5nyA33Z41m5uzmZlw11ZuFRN
rktCo0I3mTktkTMliy0bhigKRRppBQrOAAC+M2rZev3+eO35fe/5gvD5hfD5h/D5iPH5iPD5h/D4
hPD5gO/5fe75d+76ce36auz6Y+r6W+j6Uuf6Seb6QOT6OeP6MOH6KeD6Id76Gdz6Etr6DNn6B9f6
Atb6ANL4AMrwLcno3ezv8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy/f39rq6uICCurq79/f3y
8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py
3Nzvi5DyhY3zh47zh47zho7zh47zh47whIvqf4TieHzacXLRaGjGX1y6VlCwTUWmRDqbOy+SNCeP
LRaBKR8wIacOFtILBr4UJMdx3vaD+PyC7/mH8PmK8fmN8fmO8fiO8fiM8fiJ8fmG7/mC7/l87vl3
7fpv7Ppn6/pg6fpX6PpO5vpF5Po84/oz4vor4foj3vob3PoU2voN2foI1/oD1foA0vkAy/NV1Ovz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py8vL9/f2urq4gIK6urv39/fLy8vPz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Px8fO/vvOGjvOHjvOH
jvOHjvOHjvOHjvKFjeyAhuR6ftxydNNqashhXrxXUrFOR6ZFO5w8MJM0JpEsD2cxZygu2SIjzRkX
xQsHv02N4Iz//obx+Yzx+Y/y+ZLy+JLy+JLy+JHy+I7y+Yrw+Ybw+YDv+Xnu+XLt+mvs+mLq+lnp
+lDn+kfl+j7k+jXi+i3h+iXf+h3d+hXb+g/a+gnY+gTW+gDT+g7N8sDq8fPz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Ly8v39/a6uriAgrq6u/f398vLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8+3t8qqt84WO9IeO84eO84eO84eO8oWN
7ICG5Hp+3HJ102pqyGFevVdSsU5GpkU7nDwwlzAWgjdGTEfQOj/dNDPOJibLFAzCIDDJf+D2k/39
jvD4k/L4k/L4k/L4k/L4k/L4kfL4jvH5ivD5g+/5fe/5de75buz6Zer6XOn6U+j6Sub6QeT6OOP6
L+H6Jt/6Ht36Ftv6D9r6Ctj6A9b7AdT6eN3x8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8vLy/f39rq6uICCurq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py5OTvoKX0ho70h47yho3yh47xhYzrf4TjeX3bcnTSaWnH
YF27V1KxTkenQzafNh2OPkZlW8tTW+xOTtlBQdUyM9AjIckNBcBDcNqX/f2W+PqT8fiT8viT8viT
8viT8viT8viQ8viM8PmF8PmA7/l37vlv7Ppm6vpe6fpU5/pM5fpC5Po44/ow4fon3voe3foX2/oR
2voK2PoA1/5Y2PHk7vDz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py8vL9/f2urq4gIK6u
rv39/fLy8vPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Xq6vi1ufSJkP2MlPiIke+Died8gd92edZucc5nZsVeW7lTSrNGM6g/K5FP
aHdu2Wty9mhn5Vxc4k5O2z4+1C8wzhoWxgkEv1qW4qD//5X1+ZPx+JPy+JPy+JPy+JPy+JLx+Izx
+Ybw+YDv+Xju+XDs+mfq+l7p+lXo+kzm+kPk+jnj+jDi+iff+h/d+hfb+hHa+gDZ/iTZ+Nfp7fPz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8v39/a6uriAgrq6u/f398vLy8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz+NHT6Z+l+Y6Y+4WN94OI7Ht943Bz22dp0mFewVlSp1JcjWWle33yeX/6e3rtcnLrZ2fm
WFjgRkbYNjbRJSbKDArADBTAY6fml/38lPT5k/H4k/L4k/L4k/L4kfH5jPH5hvD5gO/5eO75cOz6
Z+r6Xun6Vej6TOb6Q+T6OeP6MOL6J9/6H936F9v6A9r8Itn4x+ju8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy/f39rq6uICCurq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pw8fDNzc2/wL/Dw8PNzc3s7Ozd3d29vb3U0dHi3t7h39+o
nJmZdXWsdXi/iIq1f32YZ1+Wc3CJcJqCfu95gPx8f/Z+fe5+fu96eu9vb+lgYORNTdw7O9MpKcwY
GMUAALyChdrC6u6S+fqT8vmT8viT8viS8viP8viK8PmE8Pl+7/l27vpv7Ppm6vpd6fpT6PpK5vpB
5Po44/ov4fom3/oe3foR2/sx3PfJ5+3z8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Py8vL9/f2urq4gIK6urv39/fLy8vPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz83+3gSt8LjB8MzKANGZ9ZoeTiD6IQD58QTJ7OGp7amaOaj+LRzuDQXiHeKqvqFOP
UzF/NWGKYaSmsYCA5IWG/H197X19731973x873Jy62Ji5FBQ3D090ysrzA4OwT49z+Pi8PLz88Tn
6pfx95P0+ZPy+JDy+Izx+Ijw+YLv+Xzv+XTu+m3s+mTq+lvp+lLn+kjl+kHk+jfi+izg+iXf+hzd
+jrf+s7r8fPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8v39/a6u
riAgrq6u/f398vLy8/Pz8/Pz8/Pzv7a2opeXwcDA3tnZrJmZurm58/Pz0MbGkn5+j36A2dnYb6Ry
HpMhaYJrSYhLKoguYoNjQI9DV4JYJo4qTnZQgpaCbZdvLIkwZ41pSIVLIoQmVnxZRH9FhI+Drq3A
hITxgoH0fn7ufX3vfHzvcnLrYmLkT0/cOzvTJCLKHR3GyMjt8/Pz8/Pz8/Pz1u7xqPL3k/D3jPP6
iPH5hPD5f+/5eu75cuz6auz6Yur6Wej6UOf6R+X6POT6MeL6KOD6M+D5ceb32PD08/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy/f39rq6uICCurq79/f3y8vLz
8/Pz8/Pz8/OYMjKCDw99aWmUgICNERF1WVnW1NSSTU2CNzeDKSp8UVR+loAnlC5BfUM2hzk6gT2n
q6eAoIFDdEUbex9KeUt7kXwYhh43bzmBjoJpjmoiiSU+bUAagB9gg1zz8/PMzeyVlPmBgO5+fu94
ee1tbehcXOFJSdk6OtJNTdKysubz8/Pz8/Pz8/Pz8/Pz8/Pt8vPR7fCt6O2K8fqA7/l57vl17vps
7fpg6/pa6fpT6PpI5/pD5fo74/pO5PmL6fe+7vXz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py8vL9/f2urq4gIK6urv39/fLy8vPz8/Pz8/Pz85IwMIUP
D3UtLXNLS5AQEHQjI6ynp7ekpK2lpZRoZ4QPFpqdli6WNzN4NUd9SSeAKYqRipm0mmeqal+rYqy+
rMfRx3K3dGSmZZWxldjd2Yu/jWGkZHKydc/VzvPz8/Pz8+fn9MLC8KSl746Q64GB535/5IaG4bKy
6N3d7/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8+7x8tXx9L/t86Tu9o/u+Int+Izr+ITq+H7q+Irp
95Dq97bt9dXw9PDz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Ly8v39/a6uriAgrq6u/f398vLy8/Pz8/Pz8/PzijQ0aRcXdiAgfB0dczAweRYW
g25ul4CAeSwsdCkoiVhb3t/eT6NUJoIqMIE0RJtGwcXB6e3p4e3h5+7n8/Pz8/Pz7PDs3+zf6+7r
8/Pz8fLx4Ozg7fDt8/Pz8/Pz8/Pz8/Pz8/Pz8PDz6Ojy5eXx5+fx7u7y8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz7/Pz6PLz5/L06PL05/L05/Lz7fLz8fPz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy
/f39rq6uICCurq79/f3y8vLz8/Pz8/Pz8/OGJydgHh6DYWGNEBB3VFSEVlZuJiZ1VlZ7Dg5rLCx0
VFS6ubjV3tXB3sLA3sHb5tvz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Py8vL9/f2urq40LK6urv39
/fLy8vPz8/Pz8/Pz851OTohTU8O7u59AQJ6Fhbmrq5VAQJ2Hh5FBQZA0NI4/P7avr/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8v39/a6urjEyrq6u/f398vLy8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8vLy/f39rq6uYm+urq79/f3y8vLz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Py8vL9/f2urq5vbK6urv39/fLy8vPz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Ly8v39/a6uriAg
rq6u/f398vLy8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz
8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8vLy/f39rq6uOkSurq79/f3x8fHy8vLy
8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy
8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy
8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy
8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy
8vLy8vLy8vLy8vLy8vLy8vLy8vLx8fH9/f2urq5tL7Gxsf////7+/v7+/v7+/v7+/v7+/v7+/v7+
/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+
/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+
/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+
/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+
/v7+/v7+/v7+/v///7GxsTc6mJiYsbGxr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+v
r6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+v
r6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+v
r6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+v
r6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vr6+vsbGx
mJiYIj4AAA==
);}
