#!/usr/bin/perl

#######################################################################
# Notes:
#
# RSA privat key generation with openssl:
#  openssl genrsa -out mykey.pem 1024
#
# RSA extract public key from privat key with openssl:
#  openssl rsa -in mykey.pem -out mykey.pub -pubout
#
# RSA encryption with openssl:
#  openssl rsautl -encrypt -pubin -inkey mykey.pub -in plain.txt -out crypt.bin
#
# RSA decryption with openssl:
#  openssl rsautl -decrypt -inkey mykey.pem -in crypt.bin 
#
# RSA show public key in readable form:
#  openssl rsa -text -in mykey.pub -pubin
#
# RSA show privat key in readable form:
#  openssl rsa -text -in mykey.pem 
#
#


#######################################################################
#----------------------------------------------------------------------
#######################################################################
#
# generic password changer class
#
#######################################################################
package PasswordChanger;
sub new
{
   my $type=shift;
   return(bless({@_},$type));
}

sub SetPassword
{
   my $self=shift;
   my $account=shift;
   my $newpassword=shift;
   return(undef);
}

sub GenerateSecureRandomPassoword
{
   my $self=shift;
   my $password_length = $_[0];
   my $password;
   my $_rand;

   if (!$password_length) {
      $password_length=8;
   }
   my (@set1,@set2,@set3,@set4);
   if ($self->{passmode} eq "native"){
      @set1=('A'..'X');
      @set2=('a'..'x');
      @set3=('0'..'9');
      @set4=('0'..'9','A'..'X','a'..'x');
   }
   else{
      @set1=('A'..'Z');
      @set2=('a'..'z');
      @set3=('0'..'9');
      @set4=(qw(_ / * . ,));
   }
   my @set=(\@set1,\@set2,\@set3,\@set4);
   srand();
   my @setuse;
   for(my $setno=0;$setno<$#set;$setno++){
      $setuse[$setno]=0;
   }
   for(my $i=0;$i<=$password_length;$i++){
      my $set=int(rand($#set+1));
      $setuse[$set]++;
      my $setchar=int(rand($#{$set[$set]}+1));
      $password.=$set[$set]->[$setchar];
   }                                           # need to add support to ensure
                                               # that all sets are used!
   return($password);
}

sub Commit
{
   my $self=shift;
   return(undef);
}
#######################################################################
# derivations of PasswordChanger

package PasswordChanger::010Shadow;
use vars(qw(@ISA));
@ISA=qw(PasswordChanger::020Passwd);

sub new
{
   my $type=shift;
   my $self=$type->SUPER::new(@_,'passwordfile'=>"/etc/shadow");
   return(undef) if (!defined($self));
   my $self=bless($self,$type);
   return(undef) if (!-f "/etc/shadow");
   return($self);
}

package PasswordChanger::020Passwd;
use strict;
use vars qw(@ISA);
@ISA=("PasswordChanger");

sub new
{
   my $type=shift;
   my $self=bless($type->SUPER::new(@_),$type);
   $self->{passwordfile}="/etc/passwd" if (!defined($self->{passwordfile}));
   return(undef) if (!-f $self->{passwordfile});
   return($self);
}

sub getDefaultEntryTypeID
{
   my $self=shift;
   return(1);
}

sub getDefaultHostname
{
   my $self=shift;
   my $hostname=`uname -n`; 
   $hostname=~s/\s*$//;
   return($hostname);
}

sub SetPassword
{
   my $self=shift;
   my $account=shift;
   my $newpassword=shift;
   my $tmpfile=$self->{passwordfile};
   $tmpfile=~s/\/[^\/]+$/\/ptmp/;
   if (defined($self->{tmpfile})){
      $self->{error}="SetPassword already called without a Commit";
      return(undef);
   }
   if (-f $tmpfile){
      $self->{error}="lock at $tmpfile exists";
      return(undef);
   }
   umask(0077);
   if (!open(T,">$tmpfile")){
      $self->{error}="can't open $tmpfile";
      return(undef);
   }
   if (!open(F,"<$self->{passwordfile}")){
      $self->{error}="can't open $self->{passwordfile}";
      return(undef);
   }
   main::msg("INFO","security field $self->{passwordfile} opend");
   sub CryptPassword
   {
      my $newpass=shift;
      my @saltset=('a'..'z','A'..'Z','0'..'9','.','/');
      my $salt=$saltset[rand(62)].$saltset[rand(62)];
      my $newcrypt=crypt($newpass,$salt);
      return($newcrypt);
   }
   my $found=0;
   while(my $l=<F>){
      my @l=split(/:/,$l);
      if ($l[0] eq $account){
         $found++;
         if ($l[1]=~m/^\$1\$/){
            printf STDERR ("WARN:  lose of MD5 crypt quality\n");
         }
         if ($l[2]=~m/^\$1\$/){
            printf STDERR ("WARN:  lose of Blowfish crypt quality\n");
         }
         $l[1]=CryptPassword($newpassword);
      }
      my $newline=join(":",@l);
      if (syswrite(T,$newline)!=length($newline)){
         $self->{error}="write error $!";
         return(undef);
      }
   }
   if (!$found){
      $self->{error}="account '$account' not found";
      unlink($tmpfile);
      return(undef);
   }
   $self->{tmpfile}=$tmpfile;
   close(F);
   close(T);
   return(1);
}

sub Commit
{
   my $self=shift;

   sub CopyAndUnlink 
   {
      my ($tmpfile,$passwd)=@_;
      return(undef) if (!open(SRC,"<$tmpfile"));
      return(undef) if (!open(DST,"+<$passwd"));
      my $buffer;
      while(my $n=sysread(SRC,$buffer,8192)){   # process with sysread and
         if (syswrite(DST,$buffer,$n)!=$n){     # syswrite only allows a correct
            return(undef);                      # error handling
         }
      }
      close(SRC);
      close(DST);
      return(unlink($tmpfile));
   }
   if (defined($self->{tmpfile})){
      if (-f $self->{tmpfile}){
         if (CopyAndUnlink($self->{tmpfile},$self->{passwordfile})){
            delete($self->{tmpfile});
            return(1);
         }
         else{
            $self->{error}="rename: $!";
         }
      }
      else{
         $self->{error}="no valid tempfield '$self->{tmpfile}' found";
      }
   }
   else{
      $self->{error}="no SetPassword called";
   }
   return(undef);
}



sub DESTROY
{
   my $self=shift;
   if (defined($self->{tmpfile})){
      if (-f $self->{tmpfile}){
         unlink($self->{tmpfile});
      }
   }
}


package PasswordChanger::oracle;
use strict;
use vars qw(@ISA);
@ISA=("PasswordChanger");

sub new
{
   my $type=shift;
   my $self=bless($type->SUPER::new(@_),$type);
   eval('use IPC::Open2;use IO::Select;');
   if ($@ ne ""){
      main::msg("ERROR",$@);
      return(undef);
   }

   return($self);
}

sub getDefaultEntryTypeID
{
   my $self=shift;
   return(2);
}

sub getDefaultHostname
{
   my $self=shift;
   my $hostname=`uname -n`; 
   $hostname=~s/\s*$//;
   if ($ENV{ORACLE_SID} ne ""){
      $hostname.=":".$ENV{ORACLE_SID};
   }
   return($hostname);
}


sub sql
{
   my $self=shift;
   my $cmd=shift;

   my $command="sqlplus -S / as sysdba";
   my($rdrfh, $wtrfh);
   my $result;
   if (my $pid=open2($rdrfh,$wtrfh,$command)){
      main::msg("INFO","processing sqlplus at $pid");
      print $wtrfh ($cmd."\n");
      close($wtrfh);
      my $buffer;
      while (my $n=sysread($rdrfh,$buffer,4096)){
         main::msg("INFO","read $n bytes");
         $result.=$buffer;
      }
      close($rdrfh);
   }
   main::msg("INFO","sql result=$result");
   return($result);
}

sub SetPassword
{
   my $self=shift;
   my $account=shift;
   my $newpassword=shift;

   my $error;
   my $res=$self->sql("select password from dba_users ".
                      "where lower(username) = lower('$account');");
   if ($res=~m/no rows selected/m){
      $self->{error}="user $account does not exits";
      return(undef);
   }
   my ($oldpass,$passwordok);
   if (my ($xoldpass)=$res=~m/PASSWORD\s*[-]+\s+(\S+)\s+.*$/mi){
      $oldpass=$xoldpass;
   }
   my $res=$self->sql("alter user $account identified by $newpassword;");
   if ($res=~m/User altered.\s+/mi){
      $passwordok=1;
      $self->{lastokpassword}=$newpassword;
      $self->{lastaccount}=$account;
   }
   my $res=$self->sql("alter user $account identified by values '$oldpass';");
   if (!($res=~m/User altered.\s+/mi)){
      $self->{error}="oldpassword could not be recovered";
      return(undef);
   }
   if ($passwordok){
      return(1);
   }
   $self->{error}="can't set a valid password";
   return(0);
}

sub Commit
{
   my $self=shift;

   if (!defined($self->{lastokpassword})){
      $self->{error}="no successfuly SetPassword call";
      return(undef);
   }
   my $passwordok=0;
   my $res=$self->sql("alter user $self->{lastaccount} ".
                      "identified by $self->{lastokpassword};");
   if ($res=~m/User altered.\s+/mi){
      $passwordok=1;
   }
   delete($self->{lastaccount});
   delete($self->{lastokpassword});
   return($passwordok);
}


sub GenerateSecureRandomPassoword
{
   my $self=shift;
   my $password_length = $_[0];
   my $password;
   my $_rand;

   if (!$password_length) {
      $password_length=8;
   }
   my @set1=('A'..'Z');
   my @set2=('a'..'z');
   my @set3=('0'..'9');
   my @set=(\@set1,\@set2,\@set3);


   srand();
   my @setuse;
   for(my $setno=0;$setno<$#set;$setno++){
      $setuse[$setno]=0;
   }
   my $setchar=int(rand($#{$set[0]}+1));
   $password.=$set[0]->[$setchar];
   for(my $i=1;$i<=$password_length;$i++){
      my $set=int(rand($#set+1));
      $setuse[$set]++;
      my $setchar=int(rand($#{$set[$set]}+1));
      $password.=$set[$set]->[$setchar];
   }                                           # need to add support to ensure
                                               # that all sets are used!
   return($password);
}

#sub DESTROY
#{
#   my $self=shift;
#   if (defined($self->{tmpfile})){
#      if (-f $self->{tmpfile}){
#         unlink($self->{tmpfile});
#      }
#   }
#}


package PasswordChanger::storeonly;
use strict;
use vars qw(@ISA);
@ISA=("PasswordChanger");

sub new
{
   my $type=shift;
   my $self=bless($type->SUPER::new(@_),$type);

   return($self);
}

sub getDefaultEntryTypeID
{
   my $self=shift;
   return(1);
}

sub getDefaultHostname
{
   my $self=shift;
   my $hostname=`uname -n`; 
   $hostname=~s/\s*$//;
   return($hostname);
}


sub SetPassword
{
   my $self=shift;
   my $account=shift;
   my $newpassword=shift;

   return(1);
}

sub Commit
{
   my $self=shift;

   return(1);
}



#######################################################################
#----------------------------------------------------------------------
#######################################################################
#
# generic transport class
#
#######################################################################
package Transport;
use strict;
use File::Temp qw(tempfile);
use IPC::Open2;

sub new
{
   my $type=shift;
   return(bless({@_},$type));
}

sub GetPublicKeys
{
   my $self=shift;
   my $host=shift;
   my $account=shift;
   return;
   # get the list of public keys
}

sub SendCryptedData
{
   my $self=shift;
   my $host=shift;
   my $account=shift;
   my $newpass=shift;
   return(undef);
   # return true or false
}

sub ProcessPublicKeyContent
{
   my $self=shift;
   my $host=shift;
   my $account=shift;
   my $entrytypeid=shift;
   my $res=shift;

   $self->{dest}={};
   my $uid;
   my $accesskey;
   foreach my $l (split(/\n/,$res)){
      main::msg("INFO","l=$l");
      if (my ($id)=$l=~m/^KEY:(\S+)\s*$/){
         $accesskey=$id;
         next;
      }
      if (my ($id)=$l=~m/^UID:(\d+)\s*$/){
         $uid=$id;
         next;
      }
      next if ($uid eq "");
      last if ($l=~m/^OK\s*$/);
      $self->{dest}->{$uid}.=$l."\n";
   }
   if (keys(%{$self->{dest}})==0){
      $self->{error}="no distribution targets found for '$account\@$host'";
      return;
   }
   if (defined($accesskey)){
      main::msg("INFO","found new scriptkey '$accesskey'");
      my %passxkey=$self->LoadPassXKeys();
      $passxkey{"$host;$account;$entrytypeid"}=$accesskey;
      $self->StorePassXKeys(%passxkey);
   }
   
   return(scalar(keys(%{$self->{dest}})));
}

sub LoadPassXKeys
{
   my $self=shift;
   my %k=();
   eval('
      while(my @pline=getpwent()){
         if ($pline[2]==$< && $pline[7] ne ""){
            $ENV{HOME}=$pline[7];
            last;
         }
      }
      endpwent();
   ');
   my $passxkey="$ENV{HOME}/.passxkey";
   main::msg("INFO","LoadPassXKeys using $passxkey ...");
   if (open(F,"<$passxkey")){
      while(my $l=<F>){
         $l=~s/\s*$//;
         my ($h,$a,$e,$k)=split(/;/,$l);
         $k{"$h;$a;$e"}=$k;
      }
   }
   return(%k);
}


sub StorePassXKeys
{
   my $self=shift;
   my %k=@_;
   eval('
      while(my @pline=getpwent()){
         if ($pline[2]==$< && $pline[7] ne ""){
            $ENV{HOME}=$pline[7];
            last;
         }
      }
      endpwent();
   ');
   my $passxkey="$ENV{HOME}/.passxkey";
   main::msg("INFO","StorePassXKeys using $passxkey ...");
   if (open(F,">$passxkey")){
      foreach my $key (sort(keys(%k))){
         printf F ("%s;%s\n",$key,$k{$key});
      }
      close(F);
   }
}


sub CryptData
{
   my $self=shift;
   my $newpass=shift;
   my $dest=shift;
   main::msg("INFO","searching for openssl ...");
   my $openssl;
   foreach my $dir (split(/:/,$ENV{PATH}),"/opt/openssl/bin","/usr/local/bin",
                    "/usr/bin","usr/lib/openssl/bin"){
      if (-x "$dir/openssl"){
         $openssl="$dir/openssl";
         last;
      } 
   } 
   my $os=`uname -sr 2>/dev/null`;
   $os=~s/\s*$//;
   if (uc($os) eq "HP-UX B.10.20"){   # hpux 10.20 random hack
      system("ps -ef | uuencode - > /dev/dummyrandom 2>&1");
      $ENV{RANDFILE}="/dev/dummyrandom";
   }

   if (!defined($openssl)){
      $self->{error}="no openssl command found in path";
      return(undef);
   }
   main::msg("INFO","using openssl $openssl");
   my $cryptdata="";
   foreach my $uid (keys(%$dest)){
      main::msg("INFO","crypt password for $uid");
      my ($fh, $filename);
      if ((($fh, $filename)=tempfile())){
         print $fh $dest->{$uid}; 
         close($fh);
         main::msg("INFO","public key is in $filename for $uid");
         if (open(F,">/tmp/passx.pub")){
            print F $dest->{$uid};
            close(F);
         }
         my $command="$openssl rsautl -encrypt -pubin -inkey $filename";
         my($rdrfh, $wtrfh);
         if (my $pid=open2($rdrfh,$wtrfh,$command)){
            main::msg("INFO","processing crypto at $pid");
            print $wtrfh ($newpass);
            close($wtrfh);
            my $buffer;
            my $n=sysread($rdrfh,$buffer,4096);
            main::msg("INFO","read $n bytes");
            close($rdrfh);
            if ($n>0){
               $cryptdata.="$uid,".unpack("H*",$buffer)."\n";
            }
            if (open(F,">/tmp/passx.bin")){
               print F $buffer;
               close(F);
            }
         }
      }
      else{
         $self->{error}="unable to create tempfile for public key";
         return(undef);
      }
   }
   return($cryptdata);
}

#######################################################################
# derivations of Transport

package Transport::010UserAgent;
use vars(qw(@ISA));
@ISA=qw(Transport);

sub new
{
   my $type=shift;
   my $ua;
   eval('use LWP::UserAgent;'.
        'use HTTP::Request::Common;'.
        '$ua=new LWP::UserAgent(env_proxy=>1,keep_alive=>1,timeout=>30)');
   msg("DEBUG",$@) if ($@ ne "");
   return(undef) if (!defined($ua));
   my $self=bless($type->SUPER::new(@_),$type);
   $ua->default_header('Accept-Language'=>"en");
   $self->{ua}=$ua;
   return($self);
}

sub GetPublicKeys
{
   my $self=shift;
   my $host=shift;
   my $account=shift;
   my $entrytypeid=shift;

   my $storeurl=$self->{base};

   $storeurl.="/" if (!($storeurl=~m/\/$/));
   $storeurl.="passx/io/GetPublicKeys";
   main::msg("INFO","storeurl=$storeurl");
   my $ua=$self->{ua};
   my $request=POST($storeurl,[host=>$host,account=>$account,
                               entrytypeid=>$entrytypeid]);
   my $loginuser=$self->{loginuser};
   my $loginpass=$self->{loginpass};
   if ($loginuser ne "" || $loginpass ne ""){
      my $xpass=$loginpass;
      $xpass=~s/./*/g;
      main::msg("INFO","authorization login=$loginuser password=$xpass");
      $request->authorization_basic($loginuser,$loginpass);
   }
   
   my $response=$ua->request($request);
   if ($response->is_success) {
      my $res=$response->content;
      return($self->ProcessPublicKeyContent($host,$account,$entrytypeid,$res));
   }
   else {
      main::msg("ERROR",$response->status_line);
   }
   $self->{error}="no public keys found";
   return;
}

sub SendCryptedData
{
   my $self=shift;
   my $host=shift;
   my $account=shift;
   my $entrytypeid=shift;
   my $newpass=shift;

   my $cryptdata=$self->CryptData($newpass,$self->{dest});
   return(undef) if (!defined($cryptdata));
   main::msg("INFO","crypt:\n$cryptdata");


   my $storeurl=$self->{base};
   $storeurl.="/" if (!($storeurl=~m/\/$/));
   $storeurl.="passx/io/SendCryptedData";
   main::msg("INFO","storeurl=$storeurl");
   my $ua=$self->{ua};
   my %passxkey=$self->LoadPassXKeys();
   my $scriptkey=$passxkey{"$host;$account;$entrytypeid"};
   main::msg("INFO","scriptkey=$scriptkey");
   my $request=POST($storeurl,[host=>$host,
                               account=>$account,
                               entrytypeid=>$entrytypeid,
                               scriptkey=>$scriptkey,
                               cryptdata=>$cryptdata]);
   my $loginuser=$self->{loginuser};
   my $loginpass=$self->{loginpass};
   if ($loginuser ne "" || $loginpass ne ""){
      my $xpass=$loginpass;
      $xpass=~s/./*/g;
      main::msg("INFO","authorization login=$loginuser password=$xpass");
      $request->authorization_basic($loginuser,$loginpass);
   }
   my $response=$ua->request($request);
   if ($response->is_success) {
      my $res=$response->content;
      $res=~s/\s*$//;
      if ($res eq "OK"){
         return(1);
      }
      $self->{error}=$res;
   }
   else {
      main::msg("ERROR",$response->status_line);
   }

   return(0);
}

package Transport::020Simple;
use vars(qw(@ISA));
@ISA=qw(PasswordChanger);

sub new
{
   my $type=shift;
   return(undef);
   return(bless($type->SUPER::new(@_),$type));
}


package Transport::040TCP;
use vars(qw(@ISA));
@ISA=qw(Transport);

sub new
{
   my $type=shift;
   my $self=bless($type->SUPER::new(@_),$type);
   my $storeurl=$self->{base};
   my ($host)=$storeurl=~m/\/\/([^\/]+)\//;
   return(undef) if ($host eq "");
   my $port=443;
   $port=80 if ($storeurl=~m/^http:/i);
   if (my ($h,$p)=$host=~m/^(\S+):(\d+)/){
      $host=$h;
      $port=$p;
   }
   $self->{host}=$host;
   $self->{port}=$port;
   main::msg("INFO","TCP partner host=$host");
   main::msg("INFO","TCP partner port=$port");
   return(undef) if ($port!=80);
   my $sock=$self->GetSocket();
   return if (!defined($self->{sock}));
   main::msg("INFO","TCP sock=$sock");


   return($self);
}

sub GetPublicKeys
{
   my $self=shift;
   my $host=shift;
   my $account=shift;
   my $entrytypeid=shift;

   my $storeurl=$self->{base};

   $storeurl.="/" if (!($storeurl=~m/\/$/));
   $storeurl.="passx/io/GetPublicKeys";
   $storeurl.="?host=".main::httpquote(${host})."&account=".
              main::httpquote(${account});
   main::msg("INFO","requesturl=$storeurl");
   return if (!defined($self->{sock}));
   my $sock=$self->{sock};
   printf $sock ("GET %s HTTP/1.0\n",$storeurl);
   printf $sock ("Accept-Language: en\n");
   printf $sock ("Connection: keep-alive\n\n");
   my $header=1;
   my $line=0;
   my $res="";
   while(my $l=<$sock>){
      $line++;
      if ($l=~m/^\s*$/){
         $header=0;
         next;
      }
      if ($header==0){
         $res.=$l;
      }
   }
   return($self->ProcessPublicKeyContent($host,$account,$entrytypeid,$res));
   return;
}


sub SendCryptedData
{
   my $self=shift;
   my $host=shift;
   my $account=shift;
   my $entrytypeid=shift;
   my $newpass=shift;

   my $cryptdata=$self->CryptData($newpass,$self->{dest});
   return(undef) if (!defined($cryptdata));
   main::msg("INFO","crypt:\n$cryptdata");


   my $storeurl=$self->{base};
   $storeurl.="/" if (!($storeurl=~m/\/$/));
   $storeurl.="passx/io/SendCryptedData";
   main::msg("INFO","storeurl=$storeurl");
   $cryptdata=~s/,/%2C/g; 
   $cryptdata=~s/\n/%0A/g; 
   if ($cryptdata=~m/^\s*$/){
      $self->{error}="no cryption result";
      return(undef);
   }
   my %passxkey=$self->LoadPassXKeys();
   my $scriptkey=$passxkey{"$host;$account;$entrytypeid"};
   main::msg("INFO","scriptkey=$scriptkey");
   my $post="host=".main::httpquote(${host})."&account=".main::httpquote(${account}).
            "&entrytypeid=${entrytypeid}&".
            "scriptkey=${scriptkey}&cryptdata=${cryptdata}";
   my $len=length($post);
   my $head=<<EOF;
POST $storeurl HTTP/1.0
Accept-Language: en
User-Agent: PassX/TCP-Module1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: $len
Connection: keep-alive

EOF
   $post=$head.$post;
   main::msg("INFO","$post");

   my $sock=$self->GetSocket();
   return if (!defined($self->{sock}));
   print $sock $post;
   my $header=1;
   my $line=0;
   my $res="";
   while(my $l=<$sock>){
      $line++;
      if ($l=~m/^\s*$/){
         $header=0;
         next;
      }
      if ($header==0){
         $res.=$l;
      }
   }
   $res=~s/\s*$//g;
   if ($res ne "OK"){
      $self->{error}=$res;
      return(undef);
   }


   return(1);
}

sub GetSocket
{
   my $self=shift;

   close($self->{sock}) if (defined($self->{sock}));
   delete($self->{sock});
   my $sock;
   eval('use IO::Socket;'.
        '$sock=new IO::Socket::INET(Proto=>"tcp",'.
        'PeerAddr=>"'.$self->{host}.'",'.
        'PeerPort=>"'.$self->{port}.'",'.
        ');');
   if (defined($sock)){
      $self->{sock}=$sock;
      return($sock);
   }
   return;
}



package Transport::Dummy;
use vars(qw(@ISA));
@ISA=qw(PasswordChanger);

sub new
{
   my $type=shift;
   return(bless($type->SUPER::new(@_),$type));
}

sub GetPublicKeys
{
   return("a","b");
}

sub SendCryptedData
{
   return(1);
}


package main;
use strict;
use Getopt::Long;

my %param;
$param{base}="http://w5base.net/w5base/public/";
my $optresult = GetOptions ("help"          => \$param{help},
                            "user=s"        => \$param{user},
                            "host=s"        => \$param{host},
                            "pass=s"        => \$param{pass},
                            "passmode=s"    => \$param{passmode},
                            "entrytypeid=s" => \$param{entrytypeid},
                            "changer=s"     => \$param{changer},
                            "transport=s"   => \$param{transport},
                            "base=s"        => \$param{base},
                            "webuser=s"     => \$param{webuser},
                            "webpass=s"     => \$param{webpass},
                            "verbose"       => \$param{verbose});
my $fail=0;
$param{passmode}="all" if ($param{passmode} eq "");
$fail=1 if (!grep(/^(all|native)$/,($param{passmode})));

#############################################################################
#
# show help, if this is requested by user
#
if ($param{help} || !$optresult || $fail){
   print(<<EOF);
ChangePassword [options]

   --help    show this help
   --verbose display more details of operation process

   --host         use the specified host for key request [default:`uname -n`]
   --user         username which password should be changed [default:root]
   --pass         password to use - if none is specified, it will be generated
   --entrytypeid  entrytypeid [default:1 = operationsystem]
   --transport    force to use a specified transport module
   --changer      force to use a specified password changer module
   --base         http://w5base.net/w5base/public/
   --webuser      use specified user to access basic auth url
   --webpass      use specified password to access basic auth url
   --passmode     defines witch keyset is used to gernertate passwords
                  if no --pass option is specified [default:all] all|native

EOF
   exit(1);
}



#######################################################################
#                                MAIN                                 #
#######################################################################
my ($Transport,$PasswordChanger);
# find transport object
foreach my $k (grep(/::$/,sort(keys(%Transport::)))){
   $k=~s/::$//;
   next if (!($k=~m/^\d{3}/) && ($param{transport} ne $k));
   my $package="Transport::$k";
   next if (defined($param{transport}) && $param{transport} ne $package);
   if ($param{verbose}){
      printf STDERR ("INFO:  try to construct $package\n");
   }
   eval('$Transport=new '.$package."(%param);");
   if ($@ ne ""){
      if ($param{verbose}){
         printf STDERR ("INFO:  create of $package failed\n");
      }
   }
   #print $@;
   last if (defined($Transport));
}

# find password changer object
foreach my $k (grep(/::$/,sort(keys(%PasswordChanger::)))){
   my $package="PasswordChanger::$k";
   $k=~s/::$//;
   next if (!($k=~m/^\d{3}/) && ($param{changer} ne $k));
   my $package="PasswordChanger::$k";
   next if (defined($param{changer}) && $param{changer} ne $k);
   if ($param{verbose}){
      printf STDERR ("INFO:  try to construct $package\n");
   }
   eval('$PasswordChanger=new '.$package."(%param);");
   if ($@ ne ""){
      if ($param{verbose}){
         printf STDERR ("INFO:  create of $package failed\n");
      }
   }
   print $@;
   last if (defined($PasswordChanger));
}

if (!defined($PasswordChanger)){
   printf STDERR ("ERROR: can't find any useable password changer\n");
}
if (!defined($Transport)){
   printf STDERR ("ERROR: can't find any useable W5Base transport layer\n");
}
if (!defined($Transport) || !defined($PasswordChanger)){
   exit(1);
}
if (!defined($param{entrytypeid})){
   $param{entrytypeid}=$PasswordChanger->getDefaultEntryTypeID()
}
$param{user}="root"                                 if (!defined($param{user}));
$param{host}=$PasswordChanger->getDefaultHostname() if (!defined($param{host}));
$param{host}=~s/\s*$//;

if ($param{verbose}){
   printf STDERR ("INFO:  transport object = $Transport\n");
   printf STDERR ("INFO:  password changer object = $PasswordChanger\n");
   printf STDERR ("INFO:  user for password change= $param{user}\n");
   printf STDERR ("INFO:  host for password change= $param{host}\n");
}


my $newpassword=$param{pass};
if (!defined($newpassword)){
   $newpassword=$PasswordChanger->GenerateSecureRandomPassoword();
}

foreach my $user (split(/\s*,\s*/,$param{user})){
  my @PublicKeys=$Transport->GetPublicKeys($param{host},$user,
                                           $param{entrytypeid});
  if (defined(@PublicKeys)){
     msg("INFO","GetPublicKeys OK");
     msg("INFO","NewPassword=$newpassword");
     if ($PasswordChanger->SetPassword($user,$newpassword)){
        msg("INFO","SetPassword OK");
        if ($Transport->SendCryptedData($param{host},$user,
                                        $param{entrytypeid},$newpassword)){
           msg("INFO","SetCryptedData OK");
           if ($PasswordChanger->Commit()){
              msg("INFO","Commit OK");
           }
           else{
              printf STDERR ("ERROR: Commit: %s\n",$PasswordChanger->{error});
              exit(40);
           }
        }
        else{
           printf STDERR ("ERROR: SendCryptedData: %s\n",$Transport->{error});
           exit(30);
        }
     }
     else{
        printf STDERR ("ERROR: SetPassword: %s\n",$PasswordChanger->{error});
        exit(20);
     }
  }
  else{
     printf STDERR ("ERROR: GetPublicKeys: %s\n",$Transport->{error});
     exit(10);
  }
}


sub msg
{
   my $type=shift;
   my $msg=shift;
   my $format="\%-6s \%s\n";

   if ($type eq "ERROR" || $type eq "WARN"){
      foreach my $submsg (split(/\n/,$msg)){
         printf STDERR ($format,$type.":",$submsg);
      }
   }
   else{
      foreach my $submsg (split(/\n/,$msg)){
         printf STDOUT ($format,$type.":",$submsg) if ($param{verbose});
      }
   }
}

sub httpquote
{
   my $t=shift;
   $t=~s/:/%3A/g;
   return($t);
}

